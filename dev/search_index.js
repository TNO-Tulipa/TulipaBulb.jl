var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Coming Soon\nIn the meantime, see How to Use and Reference.","category":"page"},{"location":"concepts/#concepts","page":"Concepts","title":"Concepts","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Pages = [\"concepts.md\"]\nDepth = 3","category":"page"},{"location":"concepts/#concepts-summary","page":"Concepts","title":"Summary","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"TulipaEnergyModel.jl incorporates two fundamental concepts that serve as the foundation of the optimization model:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Energy Assets: representation of a physical asset that can produce, consume, store, balance, or convert energy. Some examples of what these assets can represent are:\nProducer: e.g., wind turbine, solar panel\nConsumer: e.g., electricity demand, heat demand\nStorage: e.g., battery, pumped-hydro storage\nBalancing Hub: e.g., an electricity network that serves as a connection among other energy assets\nConversion: e.g., power plants, electrolyzers\nFlows: representation of the connections among assets, e.g., pipelines, transmission lines, or simply the energy production that goes from one asset to another.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In a nutshell, the model guarantees a balance of energy for the various types of assets while considering the flow limits. It considers a set of representative periods (e.g., days or weeks) for a given timeframe (e.g., a year) the user wants to analyze. Therefore, the model has two types of temporal (time) constraints to consider the different chronology characteristics of the assets:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Intra-temporal Constraints: These constraints limit the asset or flow within a representative period. The intra-temporal constraints help to characterize the short-term operational dynamics of the assets. So far, the model considers balance and flow limitations within the representative period, but future developments will include unit commitment, ramping, and reserve constraints.\nInter-temporal Constraints: These constraints combine the information of the representative periods and create limitations between them to recover chronological information across the full timeframe. The inter-temporal constraints help to characterize the long-term operational dynamics of the assets. So far, the model uses this type of constraint to model seasonal storage, but future developments will include, for example, maximum or minimum production/consumption for a year (or any timeframe).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The mathematical formulation shows an overview of these constraints and the variables in the model.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Another essential concept in the model is the flexible time resolution, which allows for each asset to be considered in a single timestep (e.g., 1, 2, 3...) or in a range of timesteps (e.g., 1:3, meaning that the asset's variable represents the value of timesteps 1, 2, and 3). This concept allows the modelling of different dynamics depending on the asset; for instance, electricity assets can be modeled hourly, whereas hydrogen assets can be modeled in a 6-hour resolution (avoiding creating unnecessary constraints and variables).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The following sections explain these concepts in more detail.","category":"page"},{"location":"concepts/#flex-asset-connection","page":"Concepts","title":"Flexible Connection of Energy Assets","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In energy system modeling, it is becoming common to have hybrid assets like storage + renewable (e.g., battery + solar), electrolyzer + renewable (e.g., electrolyzer + wind), or renewable + hydro (e.g., solar + hydro) that are located at the same site and share a common connection point to the grid. The standard method of modeling these assets requires extra variables and constraints for them to function correctly. For example, flows from the grid are not allowed, as they either avoid charging from the grid or require green hydrogen production. Therefore, hybrid connections typically require an additional node to regulate this connection with the grid.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The representation of the energy system in TulipaEnergyModel.jl is based on Graph Theory, which deals with the connection between vertices by edges. This representation provides a more flexible framework to model energy assets in the system as vertices and flows between energy assets as edges. By connecting assets directly to each other (i.e., without having a node in between), we reduce the number of variables and constraints needed to represent hybrid configurations, thus reducing the model size.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Consider the following example to demonstrate the benefits of using a graph theory approach. In the classic connection approach, the nodes play a crucial role in modeling. For instance, every asset must be connected to a node with balance constraints. When a storage asset and a renewable asset are in a hybrid connection like the one described before, a connection point is needed to connect the hybrid configuration to the rest of the system. Therefore, to consider the hybrid configuration of a storage asset and a renewable asset, we must introduce a node (i.e., a connection point) between these assets and the external power grid (i.e., a balance point), as shown in the following figure:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: Classic connection)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In this system, the phs storage asset charges and discharges from the connection point, while the wind turbine produces power that goes directly to the connection point. This connection point is connected to the external power grid through a transmission line that leads to a balance hub that connects to other assets. Essentially, the connection point acts as a balancing hub point for the assets in this hybrid configuration. Furthermore, these hybrid configurations impose an extra constraint to avoid storage charges from the power grid.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Let's consider the modeling approach in TulipaEnergyModel.jl. As nodes are no longer needed to connect assets, we can connect them directly to each other, as shown in the figure below:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: Flexible connection)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"By implementing this approach, we can reduce the number of variables and constraints involved. For example, the balance constraint in the intermediate node and the extra constraint to avoid the storage charging from the power grid are no longer needed. Additionally, we can eliminate the variable determining the flow between the intermediate node and the power grid, because the flow from phs to balance can directly link to the external grid. The section comparison of different modeling approaches shows the quantification of these reductions.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"This example of a phs and a wind asset is useful for illustrating the advantages of this modeling approach and will be reused in the following sections. However, please keep in mind that there are other applications of hybrid configurations, such as battery-solar, hydro-solar, and electrolyzer-wind.","category":"page"},{"location":"concepts/#flex-time-res","page":"Concepts","title":"Flexible Time Resolution","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"One of the core features of TulipaEnergyModel.jl is that it can handle different time resolutions on the assets and the flows. Typically, the time resolution in an energy model is hourly, like in the following figure where we have a 6-hour energy system:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: Hourly Time Resolution)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Therefore, for this simple example, we can determine the number of constraints and variables in the optimization problem:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Number of variables: 42 since we have six connections among assets (i.e., 6 flows x 6 hours = 36 variables) and one storage asset (i.e., 1 storage level x 6 h = 6 variables)\nNumber of constraints: 72, which are:\n24 from the maximum output limit of the assets that produce, convert, or discharge energy (i.e., H2, wind, ccgt, and phs) for each hour (i.e., 4 assets x 6 h = 24 constraints)\n6 from the maximum input limit of the storage or charging limit for the phs\n6 from the maximum storage level limit for the phs\n12 from the import and export limits for the transmission line between the balance hub and the demand\n24 from the energy balance on the consumer, hub, conversion, and storage assets (i.e., demand, balance, ccgt, and phs) for each hour (i.e., 4 assets x 6 h = 24 constraints)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Depending on the input data and the level of detail you want to model, hourly resolution in all the variables might not be necessary. TulipaEnergyModel.jl can have different time resolutions for each asset and flow to simplify the optimization problem and approximate hourly representation. This feature is useful for large-scale energy systems that involve multiple sectors, as detailed granularity is not always necessary due to the unique temporal dynamics of each sector. For instance, we can use hourly resolution for the electricity sector and six-hour resolution for the hydrogen sector. We can couple multiple sectors, each with its own temporal resolution.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Let's explore the flexibility of time resolution with a few examples.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The following table shows the user input data for the definition of asset time resolution. Please note that the values presented in this example are just for illustrative purposes and do not represent a realistic case.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"using DataFrames # hide\nusing CSV # hide\ninput_asset_file = \"../../test/inputs/Variable Resolution/assets-rep-periods-partitions.csv\" # hide\nassets = CSV.read(input_asset_file, DataFrame, header = 2) # hide\nassets = assets[assets.asset .!= \"wind\", :] # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The table shows that the H2 producer and the phs storage have a uniform definition of 6 hours. This definition means we want to represent the H2 production profile and the storage level of the phs every six hours.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The same time resolution can be specified for the flows, for example (again, the values are for illustrative purposes and do not represent a realistic case):","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"input_flow_file = \"../../test/inputs/Variable Resolution/flows-rep-periods-partitions.csv\" # hide\nflows_partitions = CSV.read(input_flow_file, DataFrame, header = 2) # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The table shows a uniform definition for the flow from the hydrogen producer (H2) to the conversion asset (ccgt) of 6 hours, from the wind producer (wind) to the storage (phs) of 3 hours, and from the balance hub (balance) to the consumer (demand) of 3 hours, too. In addition, the flow from the wind producer (wind) to the balance hub (balance) is defined using the math specification of 1x2+1x4, meaning that there are two time blocks, one of two hours (i.e., 1:2) and another of four hours (i.e., 3:6). Finally, the flow from the storage (phs) to the balance hub (balance) is defined using the math specification of 1x4+1x2, meaning that there are two time blocks, one of four hours (i.e., 1:4) and another of two hours (i.e., 5:6).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The following figure illustrates these definitions on the example system.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: Variable Time Resolution)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"So, let's recap:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The hydrogen producer (H2) is in a 6-hour resolution represented by the range 1:6, meaning that the balance of the hydrogen produced is for every 6 hours.\nThe flow from the hydrogen producer to the ccgt power plant (H2,ccgt) is also in a 6-hour resolution 1:6.\nThe flow from the ccgt power plant to the balance hub (ccgt, balance) has hourly resolution [1,2,3,4,5,6].\nThe ccgt is a conversion plant that takes hydrogen to produce electricity. Since both sectors have different time resolutions, the energy balance in the conversion asset is defined in the lowest resolution connecting to the asset. In this case, the energy balance in the ccgt is defined every 6 hours, i.e., in the range 1:6.\nThe wind producer has an hourly profile of electricity production, so the resolution of the asset is hourly.\nThe wind producer output has two connections, one to the balance hub and the other to the pumped-hydro storage (phs) with different resolutions:\nThe flow from the wind producer to the phs storage (wind, phs) has a uniform resolution of two blocks from hours 1 to 3 (i.e., 1:3) and from hours 4 to 6 (i.e., 4:6).\nThe flow from the wind producer to the balance hub (wind, balance) has a variable resolution of two blocks, too, but from hours 1 to 2 (i.e., 1:2) and from hours 3 to 6 (i.e., 3:6).\nThe phs is in a 6-hour resolution represented by the range 1:6, meaning the storage balance is determined every 6 hours.\nThe flow from the phs to the balance (phs, balance) represents the discharge of the phs. This flow has a variable resolution of two blocks from hours 1 to 4 (i.e., 1:4) and from hours 5 to 6 (i.e., 5:6), which differs from the one defined for the charging flow from the wind asset.\nThe demand consumption has hourly input data with one connection to the balance hub:\nThe flow from the balance hub to the demand (balance, demand) has a uniform resolution of 3 hours; therefore, it has two blocks, one from hours 1 to 3 (i.e., 1:3) and the other from hours 4 to 6 (i.e., 4:6).\nThe balance hub integrates all the different assets with their different resolutions. The lowest resolution of all connections determines the balance equation for this asset. Therefore, the resulting resolution is into two blocks, one from hours 1 to 4 (i.e., 1:4) and the other from hours 5 to 6 (i.e., 5:6).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Note: This example demonstrates that different time resolutions can be assigned to each asset and flow in the model. Additionally, the resolutions do not need to be uniform and can vary throughout the horizon.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The complete input data for this example can be found here.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Due to the flexible resolution, we must explicitly state how the constraints are constructed. For each constraint, three things need to be considered:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Whether it is type power or type energy.\ntype power: highest resolution\ntype energy: lowest resolution (multiplied by durations)\nHow the resolution is determined (regardless of whether it is highest or lowest): the incoming flows, the outgoing flows, or a combination of both.\nHow the related parameters are treated. We use two methods of aggregation, sum or mean.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Below is the table outlining the details for each type of constraint. Note min means highest resolution, and max means lowest resolution.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Name Variables involved Parameters involved Constraint type Resolution of the constraints Parameter aggregation\nConsumer Balance inputs, outputs demand power min(incoming flows, outgoing flows) mean\nStorage Balance inputs, outputs, storage level inflows energy max(asset, min(incoming flows, outgoing flows)) sum\nHub Balance inputs, outputs - power min(incoming flows, outgoing flows) -\nConversion Balance inputs, outputs - energy max(incoming flows, outgoing flows) -\nProducers Capacity Constraints outputs production power min(outgoing flows) mean\nStorage Capacity Constraints (outgoing) outputs - power min(outgoing flows) -\nConversion Capacity Constraints (outgoing) outputs - power min(outgoing flows) -\nConversion Capacity Constraints (incoming) inputs - power min(incoming flows) -\nStorage Capacity Constraints (incoming) inputs - power min(incoming flows) -\nTransport Capacity Constraints (upper bounds) flow capacity power if it connects two hubs or demands then max(hub a,hub b), otherwise its own mean\nTransport Capacity Constraints (lower bounds) flow capacity power if it connects two hubs or demands then max(hub a,hub b), otherwise its own mean","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"For this basic example, we can describe the balance and capacity constraints in the model. For the sake of simplicity, we consider only the intra-temporal constraints, the representative period index is dropped from the equations, and there are no investment variables in the equations.","category":"page"},{"location":"concepts/#Energy-Balance-Constraints","page":"Concepts","title":"Energy Balance Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In the following sections, we lay out all the balance constraints of this example.","category":"page"},{"location":"concepts/#Storage-Balance","page":"Concepts","title":"Storage Balance","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"As shown in the table, the resolution of the storage balance is energy, which is calculated by max(asset, min(incoming flows, outgoing flows)). The resolutions of the incoming and outgoing flows of the storage are 1:3, 4:6, 1:4, and 5:6, resulting in a minimum resolution of 2. The resolution of the storage is 6. Then, max(asset, min(incoming flows, outgoing flows)) becomes max(6, min(3, (4, 2))) which results in 6, and thus this balance is for every 6 hours. The charging and discharging flows are multiplied by their durations to account for the energy in the range 1:6.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textstorage_balance_textphs16 \n qquad v^textintra-storage_textphs16 = 3 cdot p^texteff_(textwindtextphs) cdot v^textflow_(textwindtextphs)13 + 3 cdot p^texteff_(textwindtextphs) cdot v^textflow_(textwindtextphs)46 \n qquad quad - frac4p^texteff_(textphstextbalance) cdot v^textflow_(textphstextbalance)14 - frac2p^texteff_(textphstextbalance) cdot v^textflow_(textphstextbalance)56 \nendaligned","category":"page"},{"location":"concepts/#Consumer-Balance","page":"Concepts","title":"Consumer Balance","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The flows coming from the balancing hub are defined every 3 hours. Therefore, the flows impose the lowest resolution and the demand is balanced every 3 hours. The input demand is aggregated as the mean of the hourly values in the input data. As with the storage balance, the flows are multiplied by their durations.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textconsumer_balance_textdemand13 \n qquad v^textflow_(textbalancetextdemand)13 = p^textpeak demand_textdemand cdot fracsum_b=1^3 p^textdemand profile_textdemandb3 \n textconsumer_balance_textdemand46 \n qquad v^textflow_(textbalancetextdemand)46 = p^textpeak demand_textdemand cdot fracsum_b=4^6 p^textdemand profile_textdemandb3 \nendaligned","category":"page"},{"location":"concepts/#Hub-Balance","page":"Concepts","title":"Hub Balance","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The hub balance is quite interesting because it integrates several flow resolutions. Remember that we didn't define any specific time resolution for this asset. Therefore, the highest resolution of all incoming and outgoing flows in the horizon implies that the hub balance must be imposed for all 6 blocks. The balance must account for each flow variable's duration in each block.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n texthub_balance_textbalance11 \n qquad v^textflow_(textbalancetextdemand)13 = v^textflow_(textccgttextbalance) 11 + v^textflow_(textwindtextbalance)12 + v^textflow_(textphstextbalance)14 \n texthub_balance_textbalance22 \n qquad v^textflow_(textbalancetextdemand)13 = v^textflow_(textccgttextbalance) 22 + v^textflow_(textwindtextbalance)12 + v^textflow_(textphstextbalance)14 \n texthub_balance_textbalance33 \n qquad v^textflow_(textbalancetextdemand)13 = v^textflow_(textccgttextbalance) 33 + v^textflow_(textwindtextbalance)36 + v^textflow_(textphstextbalance)14 \n texthub_balance_textbalance44 \n qquad v^textflow_(textbalancetextdemand)46 = v^textflow_(textccgttextbalance) 44 + v^textflow_(textwindtextbalance)36 + v^textflow_(textphstextbalance)14\n texthub_balance_textbalance55 \n qquad v^textflow_(textbalancetextdemand)46 = v^textflow_(textccgttextbalance) 55 + v^textflow_(textwindtextbalance)36 + v^textflow_(textphstextbalance)56 \n texthub_balance_textbalance66 \n qquad v^textflow_(textbalancetextdemand)46 = v^textflow_(textccgttextbalance) 66 + v^textflow_(textwindtextbalance)36 + v^textflow_(textphstextbalance)56 \nendaligned","category":"page"},{"location":"concepts/#Conversion-Balance","page":"Concepts","title":"Conversion Balance","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The flows connected to the CCGT conversion unit have different resolutions, too. In this case, the hydrogen imposes the lowest resolution; therefore, the energy balance in this asset is also every 6 hours.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textconversion_balance_textccgt16 \n qquad 6 cdot p^texteff_(textH2textccgt) cdot v^textflow_(textH2textccgt)16 = frac1p^texteff_(textccgttextbalance) sum_b=1^6 v^textflow_(textccgttextbalance)b  \nendaligned","category":"page"},{"location":"concepts/#Capacity-Constraints","page":"Concepts","title":"Capacity Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"All capacity constraints are defined in the highest resolution to guarantee that the flows are below the limits of each asset capacity.","category":"page"},{"location":"concepts/#Storage-Capacity-Constraints","page":"Concepts","title":"Storage Capacity Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Since the storage unit only has one input and output, the capacity limit constraints are in the same resolution as the individual flows. Therefore, the constraints for the outputs of the storage (i.e., discharging capacity limit) are:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_output_flows_limit_textphs14 \n qquad v^textflow_(textphstextbalance)14 leq p^textinit capacity_textphs \n textmax_output_flows_limit_textphs56 \n qquad v^textflow_(textphstextbalance)56 leq p^textinit capacity_textphs \nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"And the constraints for the inputs of the storage (i.e., charging capacity limit) are:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_input_flows_limit_textphs13 \n qquad v^textflow_(textwindtextphs)13 leq p^textinit capacity_textphs \n textmax_input_flows_limit_textphs46 \n qquad v^textflow_(textwindtextphs)46 leq p^textinit capacity_textphs \nendaligned","category":"page"},{"location":"concepts/#Conversion-Capacity-Constraints","page":"Concepts","title":"Conversion Capacity Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Similarly, each outflow is limited to the ccgt capacity for the conversion unit.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_output_flows_limit_textccgtb \n qquad v^textflow_(textccgttextbalance)b leq p^textinit capacity_textccgt quad forall b in 16 \nendaligned","category":"page"},{"location":"concepts/#Producer-Capacity-Constraints","page":"Concepts","title":"Producer Capacity Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The wind producer asset is interesting because the output flows are in different resolutions, i.e., 1:2, 3:6, 1:3, and 4:6. The highest resolution is 1:2, 3, and 4:6. Therefore, the constraints are as follows:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_output_flows_limit_textwind12 \n qquad v^textflow_(textwindtextbalance)12 + v^textflow_(textwindtextphs)13 leq fracp^textinit capacity_textwind2 cdot sum_b=1^2 p^textavailability profile_textwindb \n textmax_output_flows_limit_textwind3 \n qquad v^textflow_(textwindtextbalance)36 + v^textflow_(textwindtextphs)13 leq p^textinit capacity_textwind cdot p^textavailability profile_textwind3 \n textmax_output_flows_limit_textwind46 \n qquad v^textflow_(textwindtextbalance)36 + v^textflow_(textwindtextphs)46 leq fracp^textinit capacity_textwind2 cdot sum_b=5^6 p^textavailability profile_textwindb \nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Since the flow variables v^textflow_(textwind textbalance)12 and v^textflow_(textwind textbalance)13 represent power, the first constraint sets the upper bound of the power for both timestep 1 and 2, by assuming an average capacity across these two timesteps. The same applies to the other two constraints.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The hydrogen (H2) producer capacity limit is straightforward, since both the asset and the flow definitions are in the same time resolution:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_output_flows_limit_textH216 \n qquad v^textflow_(textH2textccgt)16 leq p^textinit capacity_textH2 cdot p^textavailability profile_textH216 \nendaligned","category":"page"},{"location":"concepts/#Transport-Capacity-Constraints","page":"Concepts","title":"Transport Capacity Constraints","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"For the connection from the hub to the demand, there are associated transmission capacity constraints, which are in the same resolution as the flow:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_transport_flows_limit_(textbalancetextdemand)13 \n qquad v^textflow_(textbalancetextdemand)13 leq p^textinit export capacity_(textbalancetextdemand) \n textmax_transport_flows_limit_(textbalancetextdemand)46 \n qquad v^textflow_(textbalancetextdemand)46 leq p^textinit export capacity_(textbalancetextdemand) \nendaligned","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmin_transport_flows_limit_(textbalancetextdemand)13 \n qquad v^textflow_(textbalancetextdemand)13 geq - p^textinit import capacity_(textbalancetextdemand) \n textmin_transport_flows_limit_(textbalancetextdemand)46 \n qquad v^textflow_(textbalancetextdemand)46 geq - p^textinit import capacity_(textbalancetextdemand) \nendaligned","category":"page"},{"location":"concepts/#Storage-Level-limits","page":"Concepts","title":"Storage Level limits","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Since the system has a storage asset, we must limit the maximum storage level. The phs time resolution is defined for every 6 hours, so we only have one constraint.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"beginaligned\n textmax_storage_level_limit_textphs16 \n qquad v^textintra-storage_textphs16 leq p^textinit storage capacity_textphs\nendaligned","category":"page"},{"location":"concepts/#comparison","page":"Concepts","title":"Comparison of Different Modeling Approaches","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"This section quantifies the advantages of the flexible connection and flexible time resolution in the TulipaEnergyModel.jl modeling approach. So, let us consider three different approaches based on the same example:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Classic approach with hourly resolution: This approach needs an extra asset, node, to create the hybrid operation of the phs and wind assets.\nFlexible connection with hourly resolution: This approach uses the flexible connection to represent the hybrid operation of the phs and wind assets.\nFlexible connection and flexible time: This approach uses both features, the flexible connection and the flexible time resolution.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Note: The flexibility of TulipaEnergyModel.jl allows any of these three modeling approaches.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The table below shows the constraints and variables for each approach over a 6-hour horizon. These results show the potential of flexible connections and time resolution for reducing the size of the optimization model.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Modeling approach Nº Variables Nº Constraints Objective Function\nClassic approach with hourly resolution 48 84 28.4365\nFlexible connection with hourly resolution 42 72 28.4365\nFlexible connection and time resolution 16 29 28.4587","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"By comparing the classic approach with the other methods, we can analyze their differences:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The flexible connection with hourly resolution reduces 6 variables (125) and 12 constraints (approx 14). Notice that we include the 6 extra constraints related to not allowing charging from the grid, although these constraints can also be modeled as bounds. Finally, the objective function value is the same, since we use an hourly time resolution in both cases.\nThe combination of features reduces 32 variables (approx 67) and 55 constraints (approx 65) with an approximation error of approx 0073.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The level of reduction and approximation error will depend on the case study. Some cases that would benefit from this feature include:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Coupling different energy sectors with various dynamics. For instance, methane, hydrogen, and heat sectors can be represented in energy models with lower resolutions (e.g., 4, 6, or 12h) than the electricity sector, usually modeled in higher resolutions (e.g., 1h, 30 min).\nHaving high resolutions for all assets in a large-scale case study may not be necessary. For example, if analyzing a European case study focusing on a specific country like The Netherlands, hourly details for distant countries (such as Portugal and Spain) may not be required. However, one would still want to consider their effect on The Netherlands without causing too much computational burden. In such cases, flexible time resolution can maintain hourly details in the focus country, while reducing the detail in distant countries by increasing their resolution (to two hours or more). This reduction allows a broader scope without over-burdening computation.","category":"page"},{"location":"concepts/#seasonal-storage","page":"Concepts","title":"Seasonal Storage Modeling","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The inter-temporal constraints in the mathematical formulation for energy storage assets allow us to model seasonal storage. To better understand how this feature works in TulipaEnergyModel.jl, there is an example in the folder test/inputs/Storage.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Let's first look at this feature's most relevant input data, starting with the assets-data file. Here, we show only the storage assets and the appropriate columns for this example, but all the input data can be found in the previously mentioned folder.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"using DataFrames # hide\nusing CSV # hide\ninput_asset_file = \"../../test/inputs/Storage/assets-data.csv\" # hide\nassets = CSV.read(input_asset_file, DataFrame, header = 2) # hide\nfiltered_assets = assets[assets.type .== \"storage\", [\"name\", \"type\", \"initial_capacity\", \"is_seasonal\", \"initial_storage_capacity\", \"initial_storage_level\"]] # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The is_seasonal parameter determines whether or not the storage asset uses the inter-temporal constraints. The phs is the only storage asset with this type of constraint and inter-storage level variable (i.e., s^textinter_textphsp), and has 100MW capacity and 4800MWh of storage capacity (i.e., 48h discharge duration). The battery will only consider intra-temporal constraints with intra-storage level variables (i.e., s^textintra_textbatterykb_k), and has 10MW capacity with 20MWh of storage capacity (i.e., 2h discharge duration).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The rep-periods-data file has information on the representative periods in the example. We have three representative periods, each with 24 timesteps and hourly resolution, representing a day. The figure below shows the availability profile of the renewable energy sources in the example.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"rp_file = \"../../test/inputs/Storage/rep-periods-data.csv\" # hide\nrp = CSV.read(rp_file, DataFrame, header = 2) # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: availability-profiles)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The rep-periods-mapping relates each representative period with the periods in the timeframe. We have seven periods in this case, meaning the timeframe is a week. Each value in the file indicates the weight of each representative period in the timeframe period. Notice that each period is composed of a linear combination of the representative periods. For more details on obtaining the representative periods and the weights, please look at TulipaClustering.jl. For the sake of readability, we show here the information in the file in tabular form:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"map_file = \"../../test/inputs/Storage/rep-periods-mapping.csv\" # hide\nmap = CSV.read(map_file, DataFrame, header = 2) # hide\nunstacked_map = unstack(map, :period, :rep_period, :weight) # hide\nrename!(unstacked_map, [\"period\", \"k=1\", \"k=2\", \"k=3\"]) # hide\nunstacked_map[!,[\"k=1\", \"k=2\", \"k=3\"]] = convert.(Float64, unstacked_map[!,[\"k=1\", \"k=2\", \"k=3\"]]) # hide\nunstacked_map # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"The file assets-timeframe-partitions has the information on how often we want to evaluate the inter-temporal constraints that combine the information of the representative periods. In this example, we define a uniform distribution of one period, meaning that we will check the inter-storage level every day of the week timeframe.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"phs_partitions_file = \"../../test/inputs/Storage/assets-timeframe-partitions.csv\" # hide\nphs_partitions = CSV.read(phs_partitions_file, DataFrame, header = 2) # hide","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Note: For the sake of simplicity, we show how using three representative days can recover part of the chronological information of one week. The same method can be applied to more representative periods to analyze the seasonality across a year or longer timeframe.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Now let's solve the example and explore the results:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Storage\" # hide\n# input_dir should be the path to the Storage example\nenergy_problem = run_scenario(input_dir)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Since the battery is not seasonal, it only has results for the intra-storage level of each representative period, as shown in the following figure:","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: Battery-intra-storage-level)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Since the phs is defined as seasonal, it has results for only the inter-storage level. Since we defined the period partition as 1, we get results for each period (i.e., day). We can see that the inter-temporal constraints in the model keep track of the storage level through the whole timeframe definition (i.e., week).","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: PHS-inter-storage-level)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"In this example, we have demonstrated how to partially recover the chronological information of a storage asset with a longer discharge duration (such as 48 hours) than the representative period length (24 hours). This feature enables us to model both short- and long-term storage in TulipaEnergyModel.jl.","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"You can follow the hydrothermal dispatch tutorial for a more comprehensive example of seasonal storage use in the model.","category":"page"},{"location":"tutorials/#tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Here are some tutorials on how to use Tulipa.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Pages = [\"tutorials.md\"]\nDepth = 5","category":"page"},{"location":"tutorials/#basic-example","page":"Tutorials","title":"Basic example","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For our first example, let's use a tiny existing dataset. Inside the code for this package, you can find the folder test/inputs/Tiny, which includes all the files necessary to create a model and solve it.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The files inside the \"Tiny\" folder define the assets and flows data, their profiles, and their time resolution, as well as define the representative periods and which periods in the full problem formulation they represent.¹","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For more details about these files, see Input.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"¹ Ignore bad-assets-data.csv, which is used for testing.","category":"page"},{"location":"tutorials/#Run-scenario","page":"Tutorials","title":"Run scenario","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To read all data from the Tiny folder, perform all necessary steps to create a model, and solve the model, run the following in a Julia terminal:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny as a string (something like \"test/inputs/Tiny\")\nenergy_problem = run_scenario(input_dir)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The energy_problem variable is of type EnergyProblem. For more details, see the documentation for that type or the section Structures.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"That's all it takes to run a scenario! To learn about the data required to run your own scenario, see the Input section of How to Use.","category":"page"},{"location":"tutorials/#Manually-running-each-step","page":"Tutorials","title":"Manually running each step","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"If we need more control, we can create the energy problem first, then the optimization model inside it, and finally ask for it to be solved.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny\nenergy_problem = create_energy_problem_from_csv_folder(input_dir)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The energy problem does not have a model yet:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"energy_problem.model === nothing","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create the internal model, we call the function create_model!.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"create_model!(energy_problem)\nenergy_problem.model","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The model has not been solved yet, which can be verified through the solved flag inside the energy problem:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"energy_problem.solved","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Finally, we can solve the model:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"solution = solve_model!(energy_problem)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The solution is included in the individual assets and flows, but for completeness, we return the full solution object, also defined in the Structures section.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In particular, the objective value and the termination status are also included in the energy problem:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"energy_problem.objective_value, energy_problem.termination_status","category":"page"},{"location":"tutorials/#Manually-creating-all-structures-without-EnergyProblem","page":"Tutorials","title":"Manually creating all structures without EnergyProblem","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For additional control, it might be desirable to use the internal structures of EnergyProblem directly. This can be error-prone, but it is slightly more efficient. The full description for these structures can be found in Structures.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny\ngraph, representative_periods, timeframe = create_graph_and_representative_periods_from_csv_folder(input_dir)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We also need a time partition for the constraints to create the model. Creating an energy problem automatically computes this data, but since we are doing it manually, we need to calculate it ourselves.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"constraints_partitions = compute_constraints_partitions(graph, representative_periods)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The constraints_partitions has two dictionaries with the keys :lowest_resolution and :highest_resolution. The lowest resolution dictionary is mainly used to create the constraints for energy balance, whereas the highest resolution dictionary is mainly used to create the capacity constraints in the model.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Finally, we also need dataframes that store the linearized indexes of the variables.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"dataframes = construct_dataframes(graph, representative_periods, constraints_partitions, timeframe)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Now we can compute the model.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"model = create_model(graph, representative_periods, dataframes, timeframe)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Finally, we can compute the solution.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"solution = solve_model(model)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"or, if we want to store the flow, storage_level_intra_rp, and storage_level_inter_rp optimal value in the dataframes:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"solution = solve_model!(dataframes, model)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"This solution structure is the same as the one returned when using an EnergyProblem.","category":"page"},{"location":"tutorials/#Change-optimizer-and-specify-parameters","page":"Tutorials","title":"Change optimizer and specify parameters","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"By default, the model is solved using the HiGHS optimizer (or solver). To change this, we can give the functions run_scenario, solve_model, or solve_model! a different optimizer.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For instance, we run the GLPK optimizer below:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel, GLPK\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\nenergy_problem = run_scenario(input_dir, optimizer = GLPK.Optimizer)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"or","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using GLPK\n\nsolution = solve_model!(energy_problem, GLPK.Optimizer)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"or","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using GLPK\n\nsolution = solve_model(model, GLPK.Optimizer)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Notice that, in any of these cases, we need to explicitly add the GLPK package ourselves and add using GLPK before using GLPK.Optimizer.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In any of these cases, default parameters for the GLPK optimizer are used, which you can query using default_parameters. You can pass a dictionary using the keyword argument parameters to change the defaults. For instance, in the example below, we change the maximum allowed runtime for GLPK to be 1 seconds, which will most likely cause it to fail to converge in time.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel, GLPK\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\nparameters = Dict(\"tm_lim\" => 1)\nenergy_problem = run_scenario(input_dir, optimizer = GLPK.Optimizer, parameters = parameters)\nenergy_problem.termination_status","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For the complete list of parameters, check your chosen optimizer.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"These parameters can also be passed via a file. See the read_parameters_from_file function for more details.","category":"page"},{"location":"tutorials/#graph-tutorial","page":"Tutorials","title":"Using the graph structure","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Read about the graph structure in the Graph section first.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We will use the graph created above for the \"Tiny\" dataset.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The first thing that we can do is access all assets. They are the labels of the graph and can be accessed via the MetaGraphsNext API:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using MetaGraphsNext\n# Accessing assets\nlabels(graph)","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Notice that the result is a generator, so if we want the actual results, we have to collect it:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"labels(graph) |> collect","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To access the asset data, we can index the graph with an asset label:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"graph[:ocgt]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"This is a Julia struct, or composite type, named GraphAssetData. We can access its fields with .:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"graph[:ocgt].type","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Since labels returns a generator, we can iterate over its contents without collecting it into a vector.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"for a in labels(graph)\n    println(\"Asset $a has type $(graph[a].type)\")\nend","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To get all flows we can use edge_labels:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"edge_labels(graph) |> collect","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To access the flow data, we index with graph[u, v]:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"graph[:ocgt, :demand]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The type of the flow struct is GraphFlowData.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We can easily find all assets v for which a flow (a, v) exists for a given asset a (in this case, demand):","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"inneighbor_labels(graph, :demand) |> collect","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Similarly, all assets u for which a flow (u, a) exists for a given asset a (in this case, ocgt):","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"outneighbor_labels(graph, :ocgt) |> collect","category":"page"},{"location":"tutorials/#solution-tutorial","page":"Tutorials","title":"Manipulating the solution","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"First, see the description of the solution object.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Let's consider the larger dataset \"Norse\" in this section. And let's talk about two ways to access the solution.","category":"page"},{"location":"tutorials/#The-solution-returned-by-solve_model","page":"Tutorials","title":"The solution returned by solve_model","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The solution, as shown before, can be obtained when calling solve_model or solve_model!.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Norse\" # hide\n# input_dir should be the path to Norse\nenergy_problem = create_energy_problem_from_csv_folder(input_dir)\ncreate_model!(energy_problem)\nsolution = solve_model!(energy_problem)\nnothing # hide","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a traditional array in the order given by the investable assets, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using MetaGraphsNext\n\ngraph = energy_problem.graph\n[solution.assets_investment[a] for a in labels(graph) if graph[a].investable]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a traditional array in the order given by the investable flows, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"[solution.flows_investment[(u, v)] for (u, v) in edge_labels(graph) if graph[u, v].investable]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The solution.flow, solution.storage_level_intra_rp, and solution.storage_level_inter_rp values are linearized according to the dataframes in the dictionary energy_problem.dataframes with keys :flows, :lowest_storage_level_intra_rp, and :storage_level_inter_rp, respectively. You need to query the data from these dataframes and then use the column index to select the appropriate value.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a vector with all values of flow for a given (u, v) and rp, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(u, v) = first(edge_labels(graph))\nrp = 1\ndf = filter(\n    row -> row.rp == rp && row.from == u && row.to == v,\n    energy_problem.dataframes[:flows],\n    view = true,\n)\n[solution.flow[row.index] for row in eachrow(df)]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a vector with the all values of storage_level_intra_rp for a given a and rp, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:lowest_storage_level_intra_rp].asset[1]\nrp = 1\ndf = filter(\n    row -> row.asset == a && row.rp == rp,\n    energy_problem.dataframes[:lowest_storage_level_intra_rp],\n    view = true,\n)\n[solution.storage_level_intra_rp[row.index] for row in eachrow(df)]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a vector with the all values of storage_level_inter_rp for a given a, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:storage_level_inter_rp].asset[1]\ndf = filter(\n    row -> row.asset == a,\n    energy_problem.dataframes[:storage_level_inter_rp],\n    view = true,\n)\n[solution.storage_level_inter_rp[row.index] for row in eachrow(df)]","category":"page"},{"location":"tutorials/#The-solution-inside-the-graph","page":"Tutorials","title":"The solution inside the graph","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In addition to the solution object, the solution is also stored by the individual assets and flows when solve_model! is called (i.e., when using an EnergyProblem object).","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"They can be accessed like any other value from GraphAssetData or GraphFlowData, which means that we recreate the values from the previous section in a new way:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"[energy_problem.graph[a].investment for a in labels(graph) if graph[a].investable]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"[energy_problem.graph[u, v].investment for (u, v) in edge_labels(graph) if graph[u, v].investable]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(u, v) = first(edge_labels(graph))\nrp = 1\ndf = filter(\n    row -> row.rp == rp && row.from == u && row.to == v,\n    energy_problem.dataframes[:flows],\n    view = true,\n)\n[energy_problem.graph[u, v].flow[(rp, row.timesteps_block)] for row in eachrow(df)]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a vector with all the values of storage_level_intra_rp for a given a and rp, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:lowest_storage_level_intra_rp].asset[1]\nrp = 1\ndf = filter(\n    row -> row.asset == a && row.rp == rp,\n    energy_problem.dataframes[:lowest_storage_level_intra_rp],\n    view = true,\n)\n[energy_problem.graph[a].storage_level_intra_rp[(rp, row.timesteps_block)] for row in eachrow(df)]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To create a vector with all the values of storage_level_inter_rp for a given a, one can run","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:storage_level_inter_rp].asset[1]\ndf = filter(\n    row -> row.asset == a,\n    energy_problem.dataframes[:storage_level_inter_rp],\n    view = true,\n)\n[energy_problem.graph[a].storage_level_inter_rp[row.periods_block] for row in eachrow(df)]","category":"page"},{"location":"tutorials/#The-solution-inside-the-dataframes-object","page":"Tutorials","title":"The solution inside the dataframes object","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In addition to being stored in the solution object, and in the graph object, the solution for the flow, storage_level_intra_rp, and storage_level_inter_rp is also stored inside the corresponding DataFrame objects if solve_model! is called.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The code below will do the same as in the two previous examples:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(u, v) = first(edge_labels(graph))\nrp = 1\ndf = filter(\n    row -> row.rp == rp && row.from == u && row.to == v,\n    energy_problem.dataframes[:flows],\n    view = true,\n)\ndf.solution","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:storage_level_inter_rp].asset[1]\ndf = filter(\n    row -> row.asset == a,\n    energy_problem.dataframes[:storage_level_inter_rp],\n    view = true,\n)\ndf.solution","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = energy_problem.dataframes[:lowest_storage_level_intra_rp].asset[1]\nrp = 1\ndf = filter(\n    row -> row.asset == a && row.rp == rp,\n    energy_problem.dataframes[:lowest_storage_level_intra_rp],\n    view = true,\n)\ndf.solution","category":"page"},{"location":"tutorials/#Values-of-constraints-and-expressions","page":"Tutorials","title":"Values of constraints and expressions","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"By accessing the model directly, we can query the values of constraints and expressions. We need to know the name of the constraint and how it is indexed, and for that, you will need to check the model.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For instance, we can get all incoming flows in the lowest resolution for a given asset for a given representative period with the following:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using JuMP\na = energy_problem.dataframes[:lowest].asset[end]\nrp = 1\ndf = filter(\n    row -> row.asset == a && row.rp == rp,\n    energy_problem.dataframes[:lowest],\n    view = true,\n)\n[value(energy_problem.model[:incoming_flow_lowest_resolution][row.index]) for row in eachrow(df)]","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The values of constraints can also be obtained, however, they are frequently indexed in a subset, which means that their indexing is not straightforward. To know how they are indexed, it is necessary to look at the model code. For instance, to get the consumer balance, we first need to filter the :highest_in_out dataframes by consumers:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"df_consumers = filter(\n    row -> graph[row.asset].type == :consumer,\n    energy_problem.dataframes[:highest_in_out],\n    view = false,\n);\nnothing # hide","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We set view = false to create a copy of this DataFrame so we can make our indexes:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"df_consumers.index = 1:size(df_consumers, 1) # overwrites existing index","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Now we can filter this DataFrame. Note that the names in the stored dataframes are defined as Symbol.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"a = :Asgard_E_demand\ndf = filter(\n    row -> row.asset == a && row.rp == rp,\n    df_consumers,\n    view = true,\n)\nvalue.(energy_problem.model[:consumer_balance][df.index])","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Here value. (i.e., broadcasting) was used instead of the vector comprehension from previous examples just to show that it also works.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The value of the constraint is obtained by looking only at the part with variables. So a constraint like 2x + 3y - 1 <= 4 would return the value of 2x + 3y.","category":"page"},{"location":"tutorials/#Writing-the-output-to-CSV","page":"Tutorials","title":"Writing the output to CSV","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"To save the solution to CSV files, you can use save_solution_to_file:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"mkdir(\"outputs\")\nsave_solution_to_file(\"outputs\", energy_problem)","category":"page"},{"location":"tutorials/#Plotting","page":"Tutorials","title":"Plotting","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In the previous sections, we have shown how to create vectors such as the one for flows. If you want simple plots, you can plot the vectors directly using any package you like.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"If you would like more custom plots, check out TulipaPlots.jl, under development, which provides tailor-made plots for TulipaEnergyModel.jl.","category":"page"},{"location":"tutorials/#hydrothermal-example","page":"Tutorials","title":"Hydrothermal Dispatch example","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Under development!","category":"page"},{"location":"how-to-use/#how-to-use","page":"How to Use","title":"How to Use","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Pages = [\"how-to-use.md\"]\nDepth = 5","category":"page"},{"location":"how-to-use/#Install","page":"How to Use","title":"Install","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"In Julia:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Enter package mode (press \"]\")","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"pkg> add TulipaEnergyModel","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Return to Julia mode (backspace)","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"julia> using TulipaEnergyModel","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Optional (takes a minute or two):","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Enter package mode (press \"]\")","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"pkg> test TulipaEnergyModel","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"(All tests should pass.)","category":"page"},{"location":"how-to-use/#Run-Scenario","page":"How to Use","title":"Run Scenario","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"To run a scenario, use the function:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"run_scenario(input_folder)\nrun_scenario(input_folder, output_folder)","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The input_folder should contain CSV files as described below. The output_folder is optional if the user wants to export the output.","category":"page"},{"location":"how-to-use/#input","page":"How to Use","title":"Input","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Currently, we only accept input from CSV files that follow the Schemas. You can also check the test/inputs folder for examples.","category":"page"},{"location":"how-to-use/#CSV","page":"How to Use","title":"CSV","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Below, we have a description of the files. At the end, in Schemas, we have the expected columns in these CSVs.","category":"page"},{"location":"how-to-use/#assets-data","page":"How to Use","title":"assets-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This file contains the list of assets and the data associated with each of them.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The investment parameters are as follows:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The investable parameter determines whether there is an investment decision for the asset or flow.\nThe investment_integer parameter determines if the investment decision is integer or continuous.\nThe investment_cost parameter represents the cost in the defined timeframe. Thus, if the timeframe is a year, the investment cost is the annualized cost of the asset.\nThe investment_limit parameter limits the total investment capacity of the asset or flow. This limit represents the potential of that particular asset or flow. Without data in this parameter, the model assumes no investment limit.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The meaning of Missing data depends on the parameter, for instance:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"investment_limit: There is no investment limit.\ninitial_storage_level: The initial storage level is free (between the storage level limits), meaning that the optimization problem decides the best starting point for the storage asset. In addition, the first and last time blocks in a representative period are linked to create continuity in the storage level.","category":"page"},{"location":"how-to-use/#flows-data","page":"How to Use","title":"flows-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The same as assets-data.csv, but for flows. Each flow is defined as a pair of assets.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The meaning of Missing data depends on the parameter, for instance:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"investment_limit: There is no investment limit.","category":"page"},{"location":"how-to-use/#assets-profiles-definition","page":"How to Use","title":"assets-timeframe-profiles.csv and assets-rep-periods-profiles.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"These files contain information about assets and their associated profiles. Each row lists an asset, the type of profile (e.g., availability, demand, maximum or minimum storage level), and the profile's name. The timeframe profiles are used in the inter-temporal constraints, whereas the representative periods profiles are used in the intra-temporal constraints.","category":"page"},{"location":"how-to-use/#flows-profiles-definition","page":"How to Use","title":"flows-rep-periods-profiles.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This file contains information about flows and their representative period profiles for intra-temporal constraints. Each flow is defined as a pair of assets.","category":"page"},{"location":"how-to-use/#profiles-timeframe-type.csv-and-profiles-rep-periods-type.csv","page":"How to Use","title":"profiles-timeframe-<type>.csv and profiles-rep-periods-<type>.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"One of these files must exist for each type defined in either assets-rep-periods-profiles or flows-rep-periods-profiles. For example, if the file assets-rep-periods-profiles defines an availability profile, the file profiles-rep-periods-availability.csv includes the profile data. The files store the profile data as indexed by a profile name.","category":"page"},{"location":"how-to-use/#assets-rep-periods-partitions-definition","page":"How to Use","title":"assets-rep-periods-partitions.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Contains a description of the partition for each asset with respect to representative periods. If not specified, each asset will have the exact time resolution as the representative period.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"There are currently three ways to specify the desired resolution, indicated in the column specification. The column partition serves to define the partitions in the specified style.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"specification = uniform: Set the resolution to a uniform amount, i.e., a time block is made of X timesteps. The number X is defined in the column partition. The number of timesteps in the representative period must be divisible by X.\nspecification = explicit: Set the resolution according to a list of numbers separated by ; on the partition. Each number in the list is the number of timesteps for that time block. For instance, 2;3;4 means that there are three time blocks, the first has 2 timesteps, the second has 3 timesteps, and the last has 4 timesteps. The sum of the list must be equal to the total number of timesteps in that representative period, as specified in num_timesteps of rep-periods-data.csv.\nspecification = math: Similar to explicit, but using + and x for simplification. The value of partition is a sequence of elements of the form NxT separated by +, indicating N time blocks of length T. For instance, 2x3+3x6 is 2 time blocks of 3 timesteps, followed by 3 time blocks of 6 timesteps, for a total of 24 timesteps in the representative period.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The table below shows various results for different formats for a representative period with 12 timesteps.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Time Block :uniform :explicit :math\n1:3, 4:6, 7:9, 10:12 3 3;3;3;3 4x3\n1:4, 5:8, 9:12 4 4;4;4 3x4\n1:1, 2:2, …, 12:12 1 1;1;1;1;1;1;1;1;1;1;1;1 12x1\n1:3, 4:6, 7:10, 11:12 NA 3;3;4;2 2x3+1x4+1x2","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Note: If an asset is not specified in this file, the balance equation will be written in the lowest resolution of both the incoming and outgoing flows to the asset.","category":"page"},{"location":"how-to-use/#flow-rep-periods-partitions-definition","page":"How to Use","title":"flows-rep-periods-partitions.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The same as assets-rep-periods-partitions.csv, but for flows.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"If a flow is not specified in this file, the flow time resolution will be for each timestep by default (e.g., hourly).","category":"page"},{"location":"how-to-use/#assets-timeframe-partitions","page":"How to Use","title":"assets-timeframe-partitions.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The same as their assets-rep-periods-partitions.csv counterpart, but for the periods in the timeframe of the model.","category":"page"},{"location":"how-to-use/#rep-periods-data","page":"How to Use","title":"rep-periods-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Describes the representative periods by their unique ID, the number of timesteps per representative period, and the resolution per timestep. Note that in the test files the resolution units are given as hours for understandability, but the resolution is technically unitless.","category":"page"},{"location":"how-to-use/#rep-periods-mapping","page":"How to Use","title":"rep-periods-mapping.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Describes the periods of the timeframe that map into a representative period and the weight of the representative periods that construct a period. Note that each weight is a decimal between 0 and 1, and that the sum of weights for a given period must also be between 0 and 1 (but do not have to sum to 1).","category":"page"},{"location":"how-to-use/#Schemas","page":"How to Use","title":"Schemas","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\n\nMarkdown.parse(\n    join([\"- **$filename**\\n\" *\n        join(\n            [\"  - `$f: $t`\" for (f, t) in schema],\n            \"\\n\",\n        ) for (filename, schema) in TulipaEnergyModel.schema_per_file\n    ] |> sort, \"\\n\")\n)","category":"page"},{"location":"how-to-use/#Structures","page":"How to Use","title":"Structures","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The list of relevant structures used in this package are listed below:","category":"page"},{"location":"how-to-use/#EnergyProblem","page":"How to Use","title":"EnergyProblem","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The EnergyProblem structure is a wrapper around various other relevant structures. It hides the complexity behind the energy problem, making the usage more friendly, although more verbose.","category":"page"},{"location":"how-to-use/#Fields","page":"How to Use","title":"Fields","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"graph: The Graph object that defines the geometry of the energy problem.\nrepresentative_periods: A vector of Representative Periods.\nconstraints_partitions: Dictionaries that connect pairs of asset and representative periods to time partitions (vectors of time blocks).\ntimeframe: The number of periods in the representative_periods.\ndataframes: A Dictionary of dataframes used to linearize the variables and constraints. These are used internally in the model only.\nmodel: A JuMP.Model object representing the optimization model.\nsolution: A structure of the variable values (investments, flows, etc) in the solution.\nsolved: A boolean indicating whether the model has been solved or not.\nobjective_value: The objective value of the solved problem (Float64).\ntermination_status: The termination status of the optimization model.\ntime_read_data: Time taken (in seconds) for reading the data (Float64).\ntime_create_model: Time taken (in seconds) for creating the model (Float64).\ntime_solve_model: Time taken (in seconds) for solving the model (Float64).","category":"page"},{"location":"how-to-use/#Constructor","page":"How to Use","title":"Constructor","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The EnergyProblem can also be constructed using the minimal constructor below.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"EnergyProblem(graph, representative_periods, timeframe): Constructs a new EnergyProblem object with the given graph, representative periods, and timeframe. The constraints_partitions field is computed from the representative_periods, and the other fields are initialized with default values.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"See the basic example tutorial to see how these can be used.","category":"page"},{"location":"how-to-use/#Graph","page":"How to Use","title":"Graph","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The energy problem is defined using a graph. Each vertex is an asset, and each edge is a flow.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"We use MetaGraphsNext.jl to define the graph and its objects. Using MetaGraphsNext we can define a graph with metadata, i.e., associate data with each asset and flow. Furthermore, we can define the labels of each asset as keys to access the elements of the graph. The assets in the graph are of type GraphAssetData, and the flows are of type GraphFlowData.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The graph can be created using the create_graph_and_representative_periods_from_csv_folder function, or it can be accessed from an EnergyProblem.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"See how to use the graph in the graph tutorial.","category":"page"},{"location":"how-to-use/#GraphAssetData","page":"How to Use","title":"GraphAssetData","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This structure holds all the information of a given asset. These are stored inside the Graph. Given a graph graph, an asset a can be accessed through graph[a].","category":"page"},{"location":"how-to-use/#GraphFlowData","page":"How to Use","title":"GraphFlowData","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This structure holds all the information of a given flow. These are stored inside the Graph. Given a graph graph, a flow from asset u to asset v can be accessed through graph[u, v].","category":"page"},{"location":"how-to-use/#Partition","page":"How to Use","title":"Partition","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A representative period will be defined with a number of timesteps. A partition is a division of these timesteps into time blocks such that the time blocks are disjunct (not overlapping) and that all timesteps belong to some time block. Some variables and constraints are defined over every time block in a partition.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"For instance, for a representative period with 12 timesteps, all sets below are partitions:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10 11 12","category":"page"},{"location":"how-to-use/#timeframe","page":"How to Use","title":"Timeframe","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The timeframe is the total period we want to analyze with the model. Usually this is a year, but it can be any length of time. A timeframe has two fields:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"num_periods: The timeframe is defined by a certain number of periods. For instance, a year can be defined by 365 periods, each describing a day.\nmap_periods_to_rp: Indicates the periods of the timeframe that map into a representative period and the weight of the representative period to construct that period.","category":"page"},{"location":"how-to-use/#representative-periods","page":"How to Use","title":"Representative Periods","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The timeframe (e.g., a full year) is described by a selection of representative periods, for instance, days or weeks, that nicely summarize other similar periods. For example, we could model the year into 3 days, by clustering all days of the year into 3 representative days. Each one of these days is called a representative period. TulipaEnergyModel.jl has the flexibility to consider representative periods of different lengths for the same timeframe (e.g., a year can be represented by a set of 4 days and 2 weeks). To obtain the representative periods, we recommend using TulipaClustering.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A representative period has four fields:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"mapping: Indicates the periods of the timeframe that map into a representative period and the weight of the representative period in them.\nweight: Indicates how many representative periods are contained in the timeframe; this is inferred automatically from mapping.\ntimesteps: The number of timesteps blocks in the representative period.\nresolution: The duration in time of each timestep.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The number of timesteps and resolution work together to define the coarseness of the period. Nothing is defined outside of these timesteps; for instance, if the representative period represents a day and you want to specify a variable or constraint with a coarseness of 30 minutes. You need to define the number of timesteps to 48 and the resolution to 0.5.","category":"page"},{"location":"how-to-use/#Solution","page":"How to Use","title":"Solution","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The solution object energy_problem.solution is a mutable struct with the following fields:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"assets_investment[a]: The investment for each asset, indexed on the investable asset a.\nflows_investment[u, v]: The investment for each flow, indexed on the investable flow (u, v).\nstorage_level_intra_rp[a, rp, timesteps_block]: The storage level for the storage asset a within (intra) a representative period rp and a time block timesteps_block. The list of time blocks is defined by constraints_partitions, which was used to create the model.\nstorage_level_inter_rp[a, periods_block]: The storage level for the storage asset a between (inter) representative periods in the periods block periods_block.\nflow[(u, v), rp, timesteps_block]: The flow value for a given flow (u, v) at a given representative period rp, and time block timesteps_block. The list of time blocks is defined by graph[(u, v)].partitions[rp].\nobjective_value: A Float64 with the objective value at the solution.\nduals: A Dictionary containing the dual variables of selected constraints.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Check the tutorial for tips on manipulating the solution.","category":"page"},{"location":"how-to-use/#time-blocks","page":"How to Use","title":"Time Blocks","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A time block is a range for which a variable or constraint is defined. It is a range of numbers, i.e., all integer numbers inside an interval. Time blocks are used for the periods in the timeframe and the timesteps in the representative period. Time blocks are disjunct (not overlapping), but do not have to be sequential.","category":"page"},{"location":"how-to-use/#infeasible","page":"How to Use","title":"Exploring infeasibility","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"If your model is infeasible, you can try exploring the infeasibility with JuMP.compute_conflict! and JuMP.copy_conflict.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Note: Not all solvers support this functionality.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Use energy_problem.model for the model argument. For instance:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"if energy_problem.termination_status == INFEASIBLE\n compute_conflict!(energy_problem.model)\n iis_model, reference_map = copy_conflict(energy_problem.model)\n print(iis_model)\nend","category":"page"},{"location":"formulation/#formulation","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This section shows the mathematical formulation of TulipaEnergyModel.jl, assuming that the temporal definition of timesteps is the same for all the elements in the model.\nThe complete mathematical formulation, including variable temporal resolutions, is also freely available in the preprint. In addition, the concepts section has an example of how the model handles the flexible time resolution.","category":"page"},{"location":"formulation/#math-sets","page":"Mathematical Formulation","title":"Sets","text":"","category":"section"},{"location":"formulation/#Sets-for-Assets","page":"Mathematical Formulation","title":"Sets for Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements Superset Notes\nmathcalA Energy assets a in mathcalA  The Energy asset types (i.e., consumer, producer, storage, hub, and conversion) are mutually exclusive\nmathcalA^textc Consumer energy assets  mathcalA^textc  subseteq mathcalA \nmathcalA^textp Producer energy assets  mathcalA^textp  subseteq mathcalA \nmathcalA^texts Storage energy assets  mathcalA^texts  subseteq mathcalA \nmathcalA^texth Hub energy assets (e.g., transshipment)  mathcalA^texth  subseteq mathcalA \nmathcalA^textcv Conversion energy assets  mathcalA^textcv subseteq mathcalA ","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"In addition, the following asset sets represent methods for incorporating additional variables and constraints in the model.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements Superset Notes\nmathcalA^texti Energy assets with investment method  mathcalA^texti  subseteq mathcalA \nmathcalA^textss Storage energy assets with seasonal method  mathcalA^textss subseteq mathcalA^texts ","category":"page"},{"location":"formulation/#Sets-for-Flows","page":"Mathematical Formulation","title":"Sets for Flows","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements Superset Notes\nmathcalF Flow connections between two assets f in mathcalF  \nmathcalF^textin_a Set of flows going into asset a  mathcalF^textin_a  subseteq mathcalF \nmathcalF^textout_a Set of flows going out of asset a  mathcalF^textout_a subseteq mathcalF ","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"In addition, the following flow sets represent methods for incorporating additional variables and constraints in the model.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements Superset Notes\nmathcalF^textt Flow between two assets with a transport method  mathcalF^textt subseteq mathcalF \nmathcalF^textti Transport flow with investment method  mathcalF^textti subseteq mathcalF^textt ","category":"page"},{"location":"formulation/#Sets-for-Temporal-Structures","page":"Mathematical Formulation","title":"Sets for Temporal Structures","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements Superset Notes\nmathcalP Periods in the timeframe p in mathcalP mathcalP subset mathbbN \nmathcalK Representative periods (rp) k in mathcalK mathcalK subset mathbbN mathcalK does not have to be a subset of mathcalP\nmathcalB_k Timesteps blocks within a representative period k b_k in mathcalB_k  mathcalB_k is a partition of timesteps in a representative period k","category":"page"},{"location":"formulation/#math-parameters","page":"Mathematical Formulation","title":"Parameters","text":"","category":"section"},{"location":"formulation/#Parameter-for-Assets","page":"Mathematical Formulation","title":"Parameter for Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Domains of Indices Description Units\np^textinv cost_a mathbbR_+ a in mathcalA Investment cost of a unit of asset a [kEUR/MW/year]\np^textinv limit_a mathbbR_+ a in mathcalA Investment potential of asset a [MW]\np^textcapacity_a mathbbR_+ a in mathcalA Capacity per unit of asset a [MW]\np^textinit capacity_a mathbbR_+ a in mathcalA Initial capacity of asset a [MW]\np^textpeak demand_a mathbbR_+ a in mathcalA^textc Peak demand of consumer asset a [MW]\np^textenergy to power ratio_a mathbbR_+ a in mathcalA^texts Energy to power ratio of storage asset a [h]\np^textinit storage capacity_a mathbbR_+ a in mathcalA^texts Initial storage capacity of storage asset a [MWh]\np^textinit storage level_a mathbbR_+ a in mathcalA^texts Initial storage level of storage asset a [MWh]\np^textavailability profile_akb_k mathbbR_+ a in mathcalA, k in mathcalK, b_k in mathcalB_k Availability profile of asset a in the representative period k and timestep block b_k [p.u.]\np^textdemand profile_akb_k mathbbR_+ a in mathcalA^textc, k in mathcalK, b_k in mathcalB_k Demand profile of consumer asset a in the representative period k and timestep block b_k [p.u.]\np^textinflows_akb_k mathbbR_+ a in mathcalA^texts, k in mathcalK, b_k in mathcalB_k Inflows of storage asset a in the representative period k and timestep block b_k [MWh]\np^textmax intra level_akb_k mathbbR_+ a in mathcalA^texts, k in mathcalK, b_k in mathcalB_k Maximum intra-storage level profile of storage asset a in representative period k and timestep block b_k [p.u.]\np^textmin intra level_akb_k mathbbR_+ a in mathcalA^texts, k in mathcalK, b_k in mathcalB_k Minimum intra-storage level profile of storage asset a in representative period k and timestep block b_k [p.u.]\np^textmax inter level_ap mathbbR_+ a in mathcalA^texts, p in mathcalP Maximum inter-storage level profile of storage asset a in the period p of the timeframe [p.u.]\np^textmin inter level_ap mathbbR_+ a in mathcalA^texts, p in mathcalP Minimum inter-storage level profile of storage asset a in the period p of the timeframe [p.u.]","category":"page"},{"location":"formulation/#Parameter-for-Flows","page":"Mathematical Formulation","title":"Parameter for Flows","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Domains of Indices Description Units\np^textvariable cost_f mathbbR_+ f in mathcalF Variable cost of flow f [kEUR/MWh]\np^texteff_f mathbbR_+ f in mathcalF Efficiency of flow f [p.u.]\np^textinv cost_f mathbbR_+ f in mathcalF^textt Investment cost of transport flow f [kEUR/MW/year]\np^textinv limit_f mathbbR_+ f in mathcalF^textt Investment potential of flow f [MW]\np^textcapacity_f mathbbR_+ f in mathcalF^textt Capacity per unit of investment of transport flow f (both exports and imports) [MW]\np^textinit export capacity_f mathbbR_+ f in mathcalF^textt Initial export capacity of transport flow f [MW]\np^textinit import capacity_f mathbbR_+ f in mathcalF^textt Initial import capacity of transport flow f [MW]\np^textavailability profile_fkb_k mathbbR_+ a in mathcalF, k in mathcalK, b_k in mathcalB_k Availability profile of flow f in the representative period k and timestep block b_k [p.u.]","category":"page"},{"location":"formulation/#Parameter-for-Temporal-Structures","page":"Mathematical Formulation","title":"Parameter for Temporal Structures","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Domains of Indices Description Units\np^textduration_b_k mathbbR_+ b_k in mathcalB_k Duration of the timestep blocks b_k [h]\np^textrp weight_k mathbbR_+ k in mathcalK Weight of representative period k [-]\np^textmap_pk mathbbR_+ p in mathcalP, k in mathcalK Map with the weight of representative period k in period p [-]","category":"page"},{"location":"formulation/#math-variables","page":"Mathematical Formulation","title":"Variables","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Domains of Indices Description Units\nv^textflow_fkb_k mathbbR f in mathcalF, k in mathcalK, b_k in mathcalB_k Flow f between two assets in representative period k and timestep block b_k [MW]\nv^textinv_a mathbbZ_+ a in mathcalA^texti Number of invested units of asset a [units]\nv^textinv_f mathbbZ_+ f in mathcalF^textti Number of invested units of capacity increment of transport flow f [units]\nv^textintra-storage_akb_k mathbbR_+ a in mathcalA^texts setminus mathcalA^textss, k in mathcalK, b_k in mathcalB_k Intra storage level (within a representative period) for storage asset a, representative period k, and timestep block b_k [MWh]\nv^textinter-storage_ap mathbbR_+ a in mathcalA^textss, p in mathcalP Inter storage level (between representative periods) for storage asset a and period p [MWh]","category":"page"},{"location":"formulation/#math-objective-function","page":"Mathematical Formulation","title":"Objective Function","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Objective function:","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\ntextminimize quad  assets_investment_cost + flows_investment_cost \n                         + flows_variable_cost\nendaligned","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Where:","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nassets_investment_cost = sum_a in mathcalA^texti p^textinv cost_a cdot p^textcapacity_a cdot v^textinv_a \nflows_investment_cost = sum_f in mathcalF^textti p^textinv cost_f cdot p^textcapacity_f cdot v^textinv_f \nflows_variable_cost = sum_f in mathcalF sum_k in mathcalK sum_b_k in mathcalB_k p^textrp weight_k cdot p^textvariable cost_f cdot p^textduration_b_k cdot v^textflow_fkb_k\nendaligned","category":"page"},{"location":"formulation/#math-constraints","page":"Mathematical Formulation","title":"Constraints","text":"","category":"section"},{"location":"formulation/#Capacity-Constraints","page":"Mathematical Formulation","title":"Capacity Constraints","text":"","category":"section"},{"location":"formulation/#Maximum-Output-Flows-Limit","page":"Mathematical Formulation","title":"Maximum Output Flows Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF^textout_a v^textflow_fkb_k leq p^textavailability profile_akb_k cdot left(p^textinit capacity_a + p^textcapacity_a cdot v^textinv_a right)  quad\n  forall a in mathcalA^textcv cup mathcalA^texts cup mathcalA^textp forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Maximum-Input-Flows-Limit","page":"Mathematical Formulation","title":"Maximum Input Flows Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF^textin_a v^textflow_fkb_k leq p^textavailability profile_akb_k cdot left(p^textinit capacity_a + p^textcapacity_a cdot v^textinv_a right)  quad\n  forall a in mathcalA^texts forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Lower-Limit-for-Flows-that-are-not-Transport-Assets","page":"Mathematical Formulation","title":"Lower Limit for Flows that are not Transport Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textflow_fkb_k geq 0 quad forall f notin mathcalF^textt forall k in mathcalK forall b_k in mathcalB_k","category":"page"},{"location":"formulation/#Constraints-for-Energy-Consumer-Assets","page":"Mathematical Formulation","title":"Constraints for Energy Consumer Assets","text":"","category":"section"},{"location":"formulation/#Balance-Constraint-for-Consumers","page":"Mathematical Formulation","title":"Balance Constraint for Consumers","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The balance constraint sense depends on the method selected in the asset file's parameter consumer_balance_sense. The default value is =, but the user can choose geq as an option.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF^textin_a v^textflow_fkb_k - sum_f in mathcalF^textout_a v^textflow_fkb_k leftbeginarrayl =  geq endarrayright p^textdemand profile_akb_k cdot p^textpeak demand_a quad\n  forall a in mathcalA^textc forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Constraints-for-Energy-Storage-Assets","page":"Mathematical Formulation","title":"Constraints for Energy Storage Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"There are two types of constraints for energy storage assets: intra-temporal and inter-temporal. Intra-temporal constraints impose limits inside a representative period, while inter-temporal constraints combine information from several representative periods (e.g., to model seasonal storage). For more information on this topic, refer to the concepts section or Tejada-Arango et al. (2018) and Tejada-Arango et al. (2019).","category":"page"},{"location":"formulation/#intra-storage-balance","page":"Mathematical Formulation","title":"Intra-temporal Constraint for Storage Balance","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textintra-storage_akb_k = v^textintra-storage_akb_k-1  + p^textinflows_akb_k + sum_f in mathcalF^textin_a p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb_k - sum_f in mathcalF^textout_a frac1p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb_k quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Intra-temporal-Constraint-for-Maximum-Storage-Level-Limit","page":"Mathematical Formulation","title":"Intra-temporal Constraint for Maximum Storage Level Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textintra-storage_akb_k leq p^textmax intra level_akb_k cdot (p^textinit storage capacity_a + p^textenergy to power ratio_a cdot p^textinit capacity_a cdot v^textinv_a) quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalKforall b_k in mathcalB_k","category":"page"},{"location":"formulation/#Intra-temporal-Constraint-for-Minimum-Storage-Level-Limit","page":"Mathematical Formulation","title":"Intra-temporal Constraint for Minimum Storage Level Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textintra-storage_akb_k geq p^textmin intra level_akb_k cdot (p^textinit storage capacity_a + p^textenergy to power ratio_a cdot p^textinit capacity_a cdot v^textinv_a) quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalKforall b_k in mathcalB_k","category":"page"},{"location":"formulation/#Intra-temporal-Cycling-Constraint","page":"Mathematical Formulation","title":"Intra-temporal Cycling Constraint","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The cycling constraint for the intra-temporal constraints links the first timestep block (b^textfirst_k) and the last one (b^textlast_k) in each representative period. The parameter p^textinit storage level_a determines the considered equations in the model for this constraint:","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If parameter p^textinit storage level_a is not defined, the intra-storage level of the last timestep block (b^textlast_k) is used as the initial value for the first timestep block in the intra-temporal constraint for the storage balance.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textintra-storage_akb^textfirst_k = v^textintra-storage_akb^textlast_k  + p^textinflows_akb^textfirst_k + sum_f in mathcalF^textin_a p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb^textfirst_k - sum_f in mathcalF^textout_a frac1p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb^textfirst_k quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalK\nendaligned","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If parameter p^textinit storage level_a is defined, we use it as the initial value for the first timestep block in the intra-temporal constraint for the storage balance. In addition, the intra-storage level of the last timestep block (b^textlast_k) in each representative period must be greater than this initial value.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textintra-storage_akb^textfirst_k = p^textinit storage level_a  + p^textinflows_akb^textfirst_k + sum_f in mathcalF^textin_a p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb^textfirst_k - sum_f in mathcalF^textout_a frac1p^texteff_f cdot p^textduration_b_k cdot v^textflow_fkb^textfirst_k quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalK\nendaligned","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textintra-storage_akb^textfirst_k geq p^textinit storage level_a quad\n  forall a in mathcalA^texts setminus mathcalA^textss forall k in mathcalK","category":"page"},{"location":"formulation/#inter-storage-balance","page":"Mathematical Formulation","title":"Inter-temporal Constraint for Storage Balance","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This constraint allows us to consider the storage seasonality throughout the model's timeframe (e.g., a year). The parameter p^textmap_pk determines how much of the representative period k is in the period p, and you can use a clustering technique to calculate it. For TulipaEnergyModel.jl, we recommend using TulipaClustering.jl to compute the clusters for the representative periods and their map.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"For the sake of simplicity, we show the constraint assuming the inter-storage level between two consecutive periods p; however, TulipaEnergyModel.jl can handle more flexible period block definition through the timeframe definition in the model using the information in the file assets-timeframe-partitions.csv.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textinter-storage_ap =  v^textinter-storage_ap-1 + sum_k in mathcalK p^textmap_pk sum_b_k in mathcalB_K p^textinflows_akb_k \n + sum_f in mathcalF^textin_a p^texteff_f sum_k in mathcalK p^textmap_pk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k \n - sum_f in mathcalF^textout_a frac1p^texteff_f sum_k in mathcalK p^textmap_pk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k\n   forall a in mathcalA^textss forall p in mathcalP\nendaligned","category":"page"},{"location":"formulation/#Inter-temporal-Constraint-for-Maximum-Storage-Level-Limit","page":"Mathematical Formulation","title":"Inter-temporal Constraint for Maximum Storage Level Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textinter-storage_ap leq p^textmax inter level_ap cdot (p^textinit storage capacity_a + p^textenergy to power ratio_a cdot p^textinit capacity_a cdot v^textinv_a) quad\n  forall a in mathcalA^textss forall p in mathcalP","category":"page"},{"location":"formulation/#Inter-temporal-Constraint-for-Minimum-Storage-Level-Limit","page":"Mathematical Formulation","title":"Inter-temporal Constraint for Minimum Storage Level Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textinter-storage_ap geq p^textmin inter level_ap cdot (p^textinit storage capacity_a + p^textenergy to power ratio_a cdot p^textinit capacity_a cdot v^textinv_a) quad\n  forall a in mathcalA^textss forall p in mathcalP","category":"page"},{"location":"formulation/#Inter-temporal-Cycling-Constraint","page":"Mathematical Formulation","title":"Inter-temporal Cycling Constraint","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"The cycling constraint for the inter-temporal constraints links the first-period block (p^textfirst) and the last one (p^textlast) in the timeframe. The parameter p^textinit storage level_a determines the considered equations in the model for this constraint:","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If parameter p^textinit storage level_a is not defined, the inter-storage level of the last period block (p^textlast) is used as the initial value for the first-period block in the inter-temporal constraint for the storage balance.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textinter-storage_ap^textfirst =  v^textinter-storage_ap^textlast + sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textinflows_akb_k \n + sum_f in mathcalF^textin_a p^texteff_f sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k \n - sum_f in mathcalF^textout_a frac1p^texteff_f sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k\n   forall a in mathcalA^textss\nendaligned","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If parameter p^textinit storage level_a is defined, we use it as the initial value for the first-period block in the inter-temporal constraint for the storage balance. In addition, the inter-storage level of the last period block (p^textlast) in the timeframe must be greater than this initial value.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textinter-storage_ap^textfirst =  p^textinit storage level_a + sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textinflows_akb_k \n + sum_f in mathcalF^textin_a p^texteff_f sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k \n - sum_f in mathcalF^textout_a frac1p^texteff_f sum_k in mathcalK p^textmap_p^textfirstk sum_b_k in mathcalB_K p^textduration_b_k cdot v^textflow_fkb_k\n   forall a in mathcalA^textss\nendaligned","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textinter-storage_ap^textlast geq p^textinit storage level_a quad\n  forall a in mathcalA^textss","category":"page"},{"location":"formulation/#Constraints-for-Energy-Hub-Assets","page":"Mathematical Formulation","title":"Constraints for Energy Hub Assets","text":"","category":"section"},{"location":"formulation/#Balance-Constraint-for-Hubs","page":"Mathematical Formulation","title":"Balance Constraint for Hubs","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF^textin_a v^textflow_fkb_k = sum_f in mathcalF^textout_a v^textflow_fkb_k quad\n  forall a in mathcalA^texth forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Constraints-for-Energy-Conversion-Assets","page":"Mathematical Formulation","title":"Constraints for Energy Conversion Assets","text":"","category":"section"},{"location":"formulation/#Balance-Constraint-for-Conversion-Assets","page":"Mathematical Formulation","title":"Balance Constraint for Conversion Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF^textin_a p^texteff_f cdot v^textflow_fkb_k = sum_f in mathcalF^textout_a fracv^textflow_fkb_kp^texteff_f quad\n  forall a in mathcalA^textcv forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Constraints-for-Transport-Assets","page":"Mathematical Formulation","title":"Constraints for Transport Assets","text":"","category":"section"},{"location":"formulation/#Maximum-Transport-Flow-Limit","page":"Mathematical Formulation","title":"Maximum Transport Flow Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textflow_fkb_k leq p^textavailability profile_fkb_k cdot left(p^textinit export capacity_f + p^textcapacity_f cdot v^textinv_f right)  quad\n  forall f in mathcalF^textt forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Minimum-Transport-Flow-Limit","page":"Mathematical Formulation","title":"Minimum Transport Flow Limit","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^textflow_fkb_k geq - p^textavailability profile_fkb_k cdot left(p^textinit import capacity_f + p^textcapacity_f cdot v^textinv_f right)  quad\n  forall f in mathcalF^textt forall k in mathcalKforall b_k in mathcalB_k\nendaligned","category":"page"},{"location":"formulation/#Constraints-for-Investments","page":"Mathematical Formulation","title":"Constraints for Investments","text":"","category":"section"},{"location":"formulation/#Maximum-Investment-Limit-for-Assets","page":"Mathematical Formulation","title":"Maximum Investment Limit for Assets","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textinv_a leq fracp^textinv limit_ap^textcapacity_a quad\n  forall a in mathcalA^texti","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If the parameter investment_integer in the assets-data.csv file is set to true, then the RHS of this constraint uses a least integer function (ceiling function) to guarantee that the limit is integer.","category":"page"},{"location":"formulation/#Maximum-Investment-Limit-for-Flows","page":"Mathematical Formulation","title":"Maximum Investment Limit for Flows","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^textinv_f leq fracp^textinv limit_fp^textcapacity_f quad\n  forall f in mathcalF^textti","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"If the parameter investment_integer in the flows-data.csv file is set to true, then the RHS of this constraint uses a least integer function (ceiling function) to guarantee that the limit is integer.","category":"page"},{"location":"formulation/#math-references","page":"Mathematical Formulation","title":"References","text":"","category":"section"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Tejada-Arango, D.A., Domeshek, M., Wogrin, S., Centeno, E., 2018. Enhanced representative days and system states modeling for energy storage investment analysis. IEEE Transactions on Power Systems 33, 6534–6544. doi:10.1109/TPWRS.2018.2819578.","category":"page"},{"location":"formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Tejada-Arango, D.A., Wogrin, S., Siddiqui, A.S., Centeno, E., 2019. Opportunity cost including short-term energy storage in hydrothermal dispatch models using a linked representative periods approach. Energy 188, 116079. doi:10.1016/j.energy.2019.116079.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​This is a comprehensive list of all of the functions in the model.\nThe function most pertinent to the user is: run_scenario","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [TulipaEnergyModel]","category":"page"},{"location":"reference/#TulipaEnergyModel.EnergyProblem","page":"Reference","title":"TulipaEnergyModel.EnergyProblem","text":"Structure to hold all parts of an energy problem. It is a wrapper around various other relevant structures. It hides the complexity behind the energy problem, making the usage more friendly, although more verbose.\n\nFields\n\ngraph: The Graph object that defines the geometry of the energy problem.\nrepresentative_periods: A vector of Representative Periods.\nconstraints_partitions: Dictionaries that connect pairs of asset and representative periods to time partitions (vectors of time blocks)\ntimeframe: The number of periods of the representative_periods.\ndataframes: The data frames used to linearize the variables and constraints. These are used internally in the model only.\nmodel: A JuMP.Model object representing the optimization model.\nsolved: A boolean indicating whether the model has been solved or not.\nobjective_value: The objective value of the solved problem.\ntermination_status: The termination status of the optimization model.\ntime_read_data: Time taken for reading the data (in seconds).\ntime_create_model: Time taken for creating the model (in seconds).\ntime_solve_model: Time taken for solving the model (in seconds).\n\nConstructor\n\nEnergyProblem(graph, representative_periods, timeframe): Constructs a new EnergyProblem object with the given graph, representative periods, and timeframe. The constraints_partitions field is computed from the representative_periods, and the other fields are initialized with default values.\n\nSee the basic example tutorial to see how these can be used.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.GraphAssetData","page":"Reference","title":"TulipaEnergyModel.GraphAssetData","text":"Structure to hold the asset data in the graph.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.GraphFlowData","page":"Reference","title":"TulipaEnergyModel.GraphFlowData","text":"Structure to hold the flow data in the graph.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.RepresentativePeriod","page":"Reference","title":"TulipaEnergyModel.RepresentativePeriod","text":"Structure to hold the data of one representative period.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.Timeframe","page":"Reference","title":"TulipaEnergyModel.Timeframe","text":"Structure to hold the data of the timeframe.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel._check_initial_storage_level!-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel._check_initial_storage_level!","text":"_check_initial_storage_level!(df)\n\nDetermine the starting value for the initial storage level for interpolating the storage level. If there is no initial storage level given, we will use the final storage level. Otherwise, we use the given initial storage level.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel._interpolate_storage_level!-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel._interpolate_storage_level!","text":"_interpolate_storage_level!(df, time_column::Symbol)\n\nTransform the storage level dataframe from grouped timesteps or periods to incremental ones by interpolation. The starting value is the value of the previous grouped timesteps or periods or the initial value. The ending value is the value for the grouped timesteps or periods.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel._parse_rp_partition","page":"Reference","title":"TulipaEnergyModel._parse_rp_partition","text":"_parse_rp_partition(Val(specification), timestep_string, rp_timesteps)\n\nParses the timestep_string according to the specification. The representative period timesteps (rp_timesteps) might not be used in the computation, but it will be used for validation.\n\nThe specification defines what is expected from the timestep_string:\n\n:uniform: The timestep_string should be a single number indicating the duration of each block. Examples: \"3\", \"4\", \"1\".\n:explicit: The timestep_string should be a semicolon-separated list of integers. Each integer is a duration of a block. Examples: \"3;3;3;3\", \"4;4;4\", \"1;1;1;1;1;1;1;1;1;1;1;1\", and \"3;3;4;2\".\n:math: The timestep_string should be an expression of the form NxD+NxD…, where D is the duration of the block and N is the number of blocks. Examples: \"4x3\", \"3x4\", \"12x1\", and \"2x3+1x4+1x2\".\n\nThe generated blocks will be ranges (a:b). The first block starts at 1, and the last block ends at length(rp_timesteps).\n\nThe following table summarizes the formats for a rp_timesteps = 1:12:\n\nOutput :uniform :explicit :math\n1:3, 4:6, 7:9, 10:12 3 3;3;3;3 4x3\n1:4, 5:8, 9:12 4 4;4;4 3x4\n1:1, 2:2, …, 12:12 1 1;1;1;1;1;1;1;1;1;1;1;1 12x1\n1:3, 4:6, 7:10, 11:12 NA 3;3;4;2 2x3+1x4+1x2\n\nExamples\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:uniform), \"3\", 1:12)\n\n# output\n\n4-element Vector{UnitRange{Int64}}:\n 1:3\n 4:6\n 7:9\n 10:12\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:explicit), \"4;4;4\", 1:12)\n\n# output\n\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:12\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:math), \"2x3+1x4+1x2\", 1:12)\n\n# output\n\n4-element Vector{UnitRange{Int64}}:\n 1:3\n 4:6\n 7:10\n 11:12\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.add_expression_terms_inter_rp_constraints!-NTuple{5, Any}","page":"Reference","title":"TulipaEnergyModel.add_expression_terms_inter_rp_constraints!","text":"add_expression_terms_inter_rp_constraints!(df_inter,\n                                           df_flows,\n                                           df_map,\n                                           graph,\n                                           representative_periods,\n                                           )\n\nComputes the incoming and outgoing expressions per row of df_inter for the constraints that are between (inter) the representative periods.\n\nThis function is only used internally in the model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.add_expression_terms_intra_rp_constraints!-NTuple{5, Any}","page":"Reference","title":"TulipaEnergyModel.add_expression_terms_intra_rp_constraints!","text":"add_expression_terms_intra_rp_constraints!(df_cons,\n                                           df_flows,\n                                           workspace,\n                                           representative_periods,\n                                           graph;\n                                           use_highest_resolution = true,\n                                           multiply_by_duration = true,\n                                           )\n\nComputes the incoming and outgoing expressions per row of df_cons for the constraints that are within (intra) the representative periods.\n\nThis function is only used internally in the model.\n\nThis strategy is based on the replies in this discourse thread:\n\nhttps://discourse.julialang.org/t/help-improving-the-speed-of-a-dataframes-operation/107615/23\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_assets_partitions!-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.compute_assets_partitions!","text":"compute_assets_partitions!(partitions, df, a, representative_periods)\n\nParses the time blocks in the DataFrame df for the asset a and every representative period in the timesteps_per_rp dictionary, modifying the input partitions.\n\npartitions must be a dictionary indexed by the representative periods, possibly empty.\n\ntimesteps_per_rp must be a dictionary indexed by rp and its values are the timesteps of that rp.\n\nTo obtain the partitions, the columns specification and partition from df are passed to the function _parse_rp_partition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_constraints_partitions-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.compute_constraints_partitions","text":"cons_partitions = compute_constraints_partitions(graph, representative_periods)\n\nComputes the constraints partitions using the assets and flows partitions stored in the graph, and the representative periods.\n\nThe function computes the constraints partitions by iterating over the partition dictionary, which specifies the partition strategy for each resolution (i.e., lowest or highest). For each asset and representative period, it calls the compute_rp_partition function to compute the partition based on the strategy.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_dual_variables-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.compute_dual_variables","text":"compute_dual_variables(model)\n\nCompute the dual variables for the given model.\n\nIf the model does not have dual variables, this function fixes the discrete variables, optimizes the model, and then computes the dual variables.\n\nArguments\n\nmodel: The model for which to compute the dual variables.\n\nReturns\n\nA named tuple containing the dual variables of selected constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_flows_partitions!-NTuple{5, Any}","page":"Reference","title":"TulipaEnergyModel.compute_flows_partitions!","text":"compute_flows_partitions!(partitions, df, u, v, representative_periods)\n\nParses the time blocks in the DataFrame df for the flow (u, v) and every representative period in the timesteps_per_rp dictionary, modifying the input partitions.\n\npartitions must be a dictionary indexed by the representative periods, possibly empty.\n\ntimesteps_per_rp must be a dictionary indexed by rp and its values are the timesteps of that rp.\n\nTo obtain the partitions, the columns specification and partition from df are passed to the function _parse_rp_partition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_rp_partition-Tuple{AbstractVector{<:AbstractVector{<:UnitRange{<:Integer}}}, Any}","page":"Reference","title":"TulipaEnergyModel.compute_rp_partition","text":"rp_partition = compute_rp_partition(partitions, :lowest)\n\nGiven the timesteps of various flows/assets in the partitions input, compute the representative period partitions.\n\nEach element of partitions is a partition with the following assumptions:\n\nAn element is of the form V = [r₁, r₂, …, rₘ], where each rᵢ is a range a:b.\nr₁ starts at 1.\nrᵢ₊₁ starts at the end of rᵢ plus 1.\nrₘ ends at some value N, that is the same for all elements of partitions.\n\nNotice that this implies that they form a disjunct partition of 1:N.\n\nThe output will also be a partition with the conditions above.\n\nStrategies\n\n:lowest\n\nIf strategy = :lowest (default), then the output is constructed greedily, i.e., it selects the next largest breakpoint following the algorithm below:\n\nInput: Vᴵ₁, …, Vᴵₚ, a list of time blocks. Each element of Vᴵⱼ is a range r = r.start:r.end. Output: V.\nCompute the end of the representative period N (all Vᴵⱼ should have the same end)\nStart with an empty V = []\nDefine the beginning of the range s = 1\nDefine an array with all the next breakpoints B such that Bⱼ is the first r.end such that r.end ≥ s for each r ∈ Vᴵⱼ.\nThe end of the range will be the e = max Bⱼ.\nDefine r = s:e and add r to the end of V.\nIf e = N, then END\nOtherwise, define s = e + 1 and go to step 4.\n\nExamples\n\npartition1 = [1:4, 5:8, 9:12]\npartition2 = [1:3, 4:6, 7:9, 10:12]\ncompute_rp_partition([partition1, partition2], :lowest)\n\n# output\n\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:12\n\npartition1 = [1:1, 2:3, 4:6, 7:10, 11:12]\npartition2 = [1:2, 3:4, 5:5, 6:7, 8:9, 10:12]\ncompute_rp_partition([partition1, partition2], :lowest)\n\n# output\n\n5-element Vector{UnitRange{Int64}}:\n 1:2\n 3:4\n 5:6\n 7:10\n 11:12\n\n:highest\n\nIf strategy = :highest, then the output selects includes all the breakpoints from the input. Another way of describing it, is to select the minimum end-point instead of the maximum end-point in the :lowest strategy.\n\nExamples\n\npartition1 = [1:4, 5:8, 9:12]\npartition2 = [1:3, 4:6, 7:9, 10:12]\ncompute_rp_partition([partition1, partition2], :highest)\n\n# output\n\n6-element Vector{UnitRange{Int64}}:\n 1:3\n 4:4\n 5:6\n 7:8\n 9:9\n 10:12\n\npartition1 = [1:1, 2:3, 4:6, 7:10, 11:12]\npartition2 = [1:2, 3:4, 5:5, 6:7, 8:9, 10:12]\ncompute_rp_partition([partition1, partition2], :highest)\n\n# output\n\n10-element Vector{UnitRange{Int64}}:\n 1:1\n 2:2\n 3:3\n 4:4\n 5:5\n 6:6\n 7:7\n 8:9\n 10:10\n 11:12\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.construct_dataframes-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.construct_dataframes","text":"dataframes = construct_dataframes(\n    graph,\n    representative_periods,\n    constraints_partitions,\n    timeframe,\n)\n\nComputes the data frames used to linearize the variables and constraints. These are used internally in the model only.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_energy_problem_from_csv_folder-Tuple{AbstractString}","page":"Reference","title":"TulipaEnergyModel.create_energy_problem_from_csv_folder","text":"energy_problem = create_energy_problem_from_csv_folder(input_folder; strict = false)\n\nReturns the TulipaEnergyModel.EnergyProblem reading all data from CSV files in the input_folder. This is a wrapper around create_graph_and_representative_periods_from_csv_folder that creates the EnergyProblem structure. Set strict = true to error if assets are missing from partition data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_graph_and_representative_periods_from_csv_folder-Tuple{AbstractString}","page":"Reference","title":"TulipaEnergyModel.create_graph_and_representative_periods_from_csv_folder","text":"graph, representative_periods, timeframe = create_graph_and_representative_periods_from_csv_folder(input_folder; strict = false)\n\nReturns the graph structure that holds all data, and the representative_periods array. Set strict = true to error if assets are missing from partition data.\n\nThe following files are expected to exist in the input folder:\n\nassets-timeframe-partitions.csv: Following the schema schemas.assets.timeframe_partition.\nassets-data.csv: Following the schema schemas.assets.data.\nassets-timeframe-profiles.csv: Following the schema schemas.assets.profiles_reference.\nassets-rep-periods-profiles.csv: Following the schema schemas.assets.profiles_reference.\nassets-rep-periods-partitions.csv: Following the schema schemas.assets.rep_periods_partition.\nflows-data.csv: Following the schema schemas.flows.data.\nflows-rep-periods-profiles.csv: Following the schema schemas.flows.profiles_reference.\nflows-rep-periods-partitions.csv: Following the schema schemas.flows.rep_periods_partition.\nprofiles-timeframe-<type>.csv: Following the schema schemas.timeframe.profiles_data.\nprofiles-rep-periods-<type>.csv: Following the schema schemas.rep_periods.profiles_data.\nrep-periods-data.csv: Following the schema schemas.rep_periods.data.\nrep-periods-mapping.csv: Following the schema schemas.rep_periods.mapping.\n\nThe returned structures are:\n\ngraph: a MetaGraph with the following information:\nlabels(graph): All assets.\nedge_labels(graph): All flows, in pair format (u, v), where u and v are assets.\ngraph[a]: A TulipaEnergyModel.GraphAssetData structure for asset a.\ngraph[u, v]: A TulipaEnergyModel.GraphFlowData structure for flow (u, v).\nrepresentative_periods: An array of TulipaEnergyModel.RepresentativePeriod ordered by their IDs.\ntimeframe: Information of TulipaEnergyModel.Timeframe.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_model!-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.create_model!","text":"create_model!(energy_problem; verbose = false)\n\nCreate the internal model of an TulipaEnergyModel.EnergyProblem.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_model-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.create_model","text":"model = create_model(graph, representative_periods, dataframes, timeframe; write_lp_file = false)\n\nCreate the energy model given the graph, representative_periods, dictionary of dataframes (created by construct_dataframes), and timeframe.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.default_parameters-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.default_parameters","text":"default_parameters(Val(optimizer_name_symbol))\ndefault_parameters(optimizer)\ndefault_parameters(optimizer_name_symbol)\ndefault_parameters(optimizer_name_string)\n\nReturns the default parameters for a given JuMP optimizer. Falls back to Dict() for undefined solvers.\n\nArguments\n\nThere are four ways to use this function:\n\nVal(optimizer_name_symbol): This uses type dispatch with the special Val type. Pass the solver name as a Symbol (e.g., Val(:HiGHS)).\noptimizer: The JuMP optimizer type (e.g., HiGHS.Optimizer).\noptimizer_name_symbol or optimizer_name_string: Pass the name in Symbol or String format and it will be converted to Val.\n\nUsing Val is necessary for the dispatch. All other cases will convert the argument and call the Val version, which might lead to type instability.\n\nExamples\n\nusing HiGHS\ndefault_parameters(HiGHS.Optimizer)\n\n# output\n\nDict{String, Any} with 1 entry:\n  \"output_flag\" => false\n\nAnother case\n\ndefault_parameters(Val(:Cbc))\n\n# output\n\nDict{String, Any} with 1 entry:\n  \"logLevel\" => 0\n\ndefault_parameters(:Cbc) == default_parameters(\"Cbc\") == default_parameters(Val(:Cbc))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.profile_aggregation-NTuple{5, Any}","page":"Reference","title":"TulipaEnergyModel.profile_aggregation","text":"profile_aggregation(agg, profiles, key, block, default_value)\n\nAggregates the profiles[key] over the block using the agg function. If the profile does not exist, uses default_value instead of each profile value.\n\nprofiles should be a dictionary of profiles, for instance graph[a].profiles or graph[u, v].profiles. If profiles[key] exists, then this function computes the aggregation of profiles[key] over the range block using the aggregator agg, i.e., agg(profiles[key][block]). If profiles[key] does not exist, then this substitutes it with a vector of default_values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.read_csv_with_implicit_schema-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.read_csv_with_implicit_schema","text":"read_csv_with_implicit_schema(dir, filename; csvargs...)\n\nReads the csv at direcory dir named filename and validates the data using a schema based on filename. The function read_csv_with_schema reads the file. Additional keywords arguments can be passed to CSV.read.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.read_csv_with_schema-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.read_csv_with_schema","text":"read_csv_with_schema(file_path, schema; csvargs...)\n\nReads the csv at file_path and validates the data using the schema. It assumes that the file's header is at the second row. The first row of the file contains some metadata information that is not used. Additional keywords arguments can be passed to CSV.read.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.read_parameters_from_file-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.read_parameters_from_file","text":"read_parameters_from_file(filepath)\n\nParse the parameters from a file into a dictionary. The keys and values are NOT checked to be valid parameters for any specific solvers.\n\nThe file should contain a list of lines of the following type:\n\nkey = value\n\nThe file is parsed as TOML, which is intuitive. See the example below.\n\nExample\n\n# Creating file\nfilepath, io = mktemp()\nprintln(io,\n  \"\"\"\n    true_or_false = true\n    integer_number = 5\n    real_number1 = 3.14\n    big_number = 6.66E06\n    small_number = 1e-8\n    string = \"something\"\n  \"\"\"\n)\nclose(io)\n# Reading\nread_parameters_from_file(filepath)\n\n# output\n\nDict{String, Any} with 6 entries:\n  \"string\"         => \"something\"\n  \"integer_number\" => 5\n  \"small_number\"   => 1.0e-8\n  \"true_or_false\"  => true\n  \"real_number1\"   => 3.14\n  \"big_number\"     => 6.66e6\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.run_scenario","page":"Reference","title":"TulipaEnergyModel.run_scenario","text":"energy_problem = run_scenario(input_folder[, output_folder; optimizer, parameters])\n\nRun the scenario in the given input_folder and return the energy problem. The output_folder is optional. If it is specified, save the sets, parameters, and solution to the output_folder.\n\nThe optimizer and parameters keyword arguments can be used to change the optimizer (the default is HiGHS) and its parameters. The variables are passed to the solve_model function.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.save_solution_to_file-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.save_solution_to_file","text":"save_solution_to_file(output_file, graph, solution)\n\nSaves the solution in CSV files inside output_folder.\n\nThe following files are created:\n\nassets-investment.csv: The format of each row is a,v,p*v, where a is the asset name, v is the corresponding asset investment value, and p is the corresponding capacity value. Only investable assets are included.\nflows-investment.csv: Similar to assets-investment.csv, but for flows.\nflows.csv: The value of each flow, per (from, to) flow, rp representative period and timestep. Since the flow is in power, the value at a timestep is equal to the value at the corresponding time block, i.e., if flow[1:3] = 30, then flow[1] = flow[2] = flow[3] = 30.\nstorage-level.csv: The value of each storage level, per asset, rp representative period, and timestep. Since the storage level is in energy, the value at a timestep is a proportional fraction of the value at the corresponding time block, i.e., if level[1:3] = 30, then level[1] = level[2] = level[3] = 10.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.save_solution_to_file-Tuple{Any, EnergyProblem}","page":"Reference","title":"TulipaEnergyModel.save_solution_to_file","text":"save_solution_to_file(output_folder, energy_problem)\n\nSaves the solution from energy_problem in CSV files inside output_file.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.solve_model","page":"Reference","title":"TulipaEnergyModel.solve_model","text":"solution = solve_model(model[, optimizer; parameters])\n\nSolve the JuMP model and return the solution. The optimizer argument should be an MILP solver from the JuMP list of supported solvers. By default we use HiGHS.\n\nThe keyword argument parameters should be passed as a list of key => value pairs. These can be created manually, obtained using default_parameters, or read from a file using read_parameters_from_file.\n\nThe solution object is a mutable struct with the following fields:\n\nassets_investment[a]: The investment for each asset, indexed on the investable asset a. To create a traditional array in the order given by the investable assets, one can run\n[solution.assets_investment[a] for a in labels(graph) if graph[a].investable]\nflows_investment[u, v]: The investment for each flow, indexed on the investable flow (u, v). To create a traditional array in the order given by the investable flows, one can run\n[solution.flows_investment[(u, v)] for (u, v) in edge_labels(graph) if graph[u, v].investable]\nstorage_level_intra_rp[a, rp, timesteps_block]: The storage level for the storage asset a for a representative period rp and a time block timesteps_block. The list of time blocks is defined by constraints_partitions, which was used to create the model. To create a vector with all values of storage_level_intra_rp for a given a and rp, one can run\n[solution.storage_level_intra_rp[a, rp, timesteps_block] for timesteps_block in constraints_partitions[:lowest_resolution][(a, rp)]]\nstorage_level_inter_rp[a, pb]: The storage level for the storage asset a for a periods block pb. To create a vector with all values of storage_level_inter_rp for a given a, one can run\n[solution.storage_level_inter_rp[a, bp] for bp in graph[a].timeframe_partitions[a]]\nflow[(u, v), rp, timesteps_block]: The flow value for a given flow (u, v) at a given representative period rp, and time block timesteps_block. The list of time blocks is defined by graph[(u, v)].partitions[rp]. To create a vector with all values of flow for a given (u, v) and rp, one can run\n[solution.flow[(u, v), rp, timesteps_block] for timesteps_block in graph[u, v].partitions[rp]]\nobjective_value: A Float64 with the objective value at the solution.\nduals: A NamedTuple containing the dual variables of selected constraints.\n\nExamples\n\nparameters = Dict{String,Any}(\"presolve\" => \"on\", \"time_limit\" => 60.0, \"output_flag\" => true)\nsolution = solve_model(model, HiGHS.Optimizer; parameters = parameters)\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.solve_model!","page":"Reference","title":"TulipaEnergyModel.solve_model!","text":"solution = solve_model!(energy_problem[, optimizer; parameters])\n\nSolve the internal model of an energy_problem. The solution obtained by calling solve_model is returned.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.solve_model!-Tuple{Any, Any, Vararg{Any}}","page":"Reference","title":"TulipaEnergyModel.solve_model!","text":"solution = solve_model!(dataframes, model, ...)\n\nSolves the JuMP model, returns the solution, and modifies dataframes to include the solution. The modifications made to dataframes are:\n\ndf_flows.solution = solution.flow\ndf_storage_level_intra_rp.solution = solution.storage_level_intra_rp\ndf_storage_level_inter_rp.solution = solution.storage_level_inter_rp\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TulipaEnergyModel","category":"page"},{"location":"#home","page":"Home","title":"TulipaEnergyModel.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TulipaEnergyModel.jl is an optimization model for the electricity market that can be coupled with other energy sectors (e.g., hydrogen, heat, natural gas, etc.). The optimization model determines the optimal investment and operation decisions for different types of assets (e.g., producers, consumers, conversion, storage, and transport). TulipaEnergyModel.jl is developed in Julia and depends on the JuMP.jl package.","category":"page"},{"location":"#license","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This content is released under the Apache License 2.0 License.","category":"page"},{"location":"#bugs-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you have found a bug, feel free to open an issue. Before opening a pull request, please read our CONTRIBUTING.md and follow the guidelines in the README.dev.md file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start a discussion here if you want to ask a question unsuitable for a bug report. This forum is for general discussion about the repository TulipaEnergyModel.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"features.md\",\"formulation.md\",\"how-to-use.md\",\"tutorials.md\",\"api.md\",\"reference.md\"]","category":"page"}]
}
