var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Coming Soon\nIn the meantime, see How to Use and Reference.","category":"page"},{"location":"how-to-use/#how-to-use","page":"How to Use","title":"How to Use","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Pages = [\"how-to-use.md\"]\nDepth = 5","category":"page"},{"location":"how-to-use/#Install","page":"How to Use","title":"Install","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Clone the repository from TulipaEnergyModel.jl into your local machine\nOpen the project in your favorite IDE (e.g., Visual Studio Code)\nStart a Julia REPL and then:\n]: Enter package mode\nactivate . : Activate here (root of project)\ninstantiate : Instantiate any packages you need according to the Project.toml\ntest: (Optional) Try running the tests to see if you're set up correctly - they should pass","category":"page"},{"location":"how-to-use/#Run-Scenario","page":"How to Use","title":"Run Scenario","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"To run a scenario, use the function:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"run_scenario(input_folder)\nrun_scenario(input_folder, output_folder)","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The inputfolder should contain CSV files as described below. The outputfolder is optional, if the user wants to export the output.","category":"page"},{"location":"how-to-use/#Input","page":"How to Use","title":"Input","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Currently, we only accept input from CSV files. There should be 7 files, each following the specification of input structures. You can also check the test/inputs folder for examples.","category":"page"},{"location":"how-to-use/#CSV","page":"How to Use","title":"CSV","text":"","category":"section"},{"location":"how-to-use/#assets-data.csv","page":"How to Use","title":"assets-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This files includes the list of assets and the data associate with each of them.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.AssetData), fieldtypes(TulipaEnergyModel.AssetData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#flows-data.csv","page":"How to Use","title":"flows-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Similar to assets-data.csv, but for flows. Each flow is defined as a pair of assets.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.FlowData), fieldtypes(TulipaEnergyModel.FlowData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#assets-profiles.csv","page":"How to Use","title":"assets-profiles.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This file contains the profiles for each asset.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.AssetProfiles), fieldtypes(TulipaEnergyModel.AssetProfiles))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#flows-profiles.csv","page":"How to Use","title":"flows-profiles.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Similar to assets-profiels.csv, but for flows.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.FlowProfiles), fieldtypes(TulipaEnergyModel.FlowData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#asset-partitions-definition","page":"How to Use","title":"assets-partitions.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Contains a description of the partition for each asset. If not specified, each asset will have the same time resolution as representative period.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"To specify the desired resolution, there are currently three options, based on the value of the column specification. The column partition serves to specify the partitions in the specification given by the column specification.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"specification = uniform: Set the resolution to a uniform amount, i.e., a time block is made of X time steps. The number X is defined in the column partition. The number of time steps in the representative period must be divisible by X.\nspecification = explicit: Set the resolution acording to a list of numbers separated by ; on the partition. Each number the list is the number of time steps for that time block. For instance, 2;3;4 means that there are three time blocks, the first has 2 time steps, the second has 3 time steps, and the last has 4 time steps. The sum of the number of time steps must be equal to the total number of time steps in that representative period.\nspecification = math: Similar to explicit, but using + and x to give the number of time steps. The value of partition is a sequence of elements of the form NxT separated by +. NxT means N time blocks of length T.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The table below shows various results for different formats for a representative period with 12 time steps.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Time Block :uniform :explicit :math\n1:3, 4:6, 7:9, 10:12 3 3;3;3;3 4x3\n1:4, 5:8, 9:12 4 4;4;4 3x4\n1:1, 2:2, …, 12:12 1 1;1;1;1;1;1;1;1;1;1;1;1 12x1\n1:3, 4:6, 7:10, 11:12 NA 3;3;4;2 2x3+1x4+1x2","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.AssetPartitionData), fieldtypes(TulipaEnergyModel.AssetPartitionData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#flow-partitions-definition","page":"How to Use","title":"flows-partitions.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Similar to assets-partitions.csv, but for flows.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.FlowPartitionData), fieldtypes(TulipaEnergyModel.FlowPartitionData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#rep-periods-data.csv","page":"How to Use","title":"rep-periods-data.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Describes the representative periods.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.RepPeriodData), fieldtypes(TulipaEnergyModel.RepPeriodData))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#rep-periods-mapping.csv","page":"How to Use","title":"rep-periods-mapping.csv","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Describes the representative periods.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Required columns:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"using Markdown, TulipaEnergyModel\nout = \"\"\nfor (f, t) in zip(fieldnames(TulipaEnergyModel.RepPeriodMapping), fieldtypes(TulipaEnergyModel.RepPeriodMapping))\n    global out *= \"- `$f: $t`\\n\"\nend\nMarkdown.parse(out)","category":"page"},{"location":"how-to-use/#Structures","page":"How to Use","title":"Structures","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The list of relevant structures used in this package are listed below:","category":"page"},{"location":"how-to-use/#EnergyProblem","page":"How to Use","title":"EnergyProblem","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The EnergyProblem structure is a wrapper around various other relevant structures. It hides the complexity behind the energy problem, making the usage more friendly, although more verbose.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The fields of EnergyProblem are","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"graph: The Graph object that defines the geometry of the energy problem.\nrepresentative_periods: A vector of Representative Periods.\nconstraints_partitions: Dictionaries that connects pairs of asset and representative periods to time partitions (vectors of time blocks)\nmodel: A JuMP model object. Initially nothing.\nsolved: A boolean indicating whether the model has been solved or not.\nobjective_value: After the model has been solved, this is the objective value at the solution.\ntermination_status: After the model has been solved, this is the termination status.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"See the basic example tutorial to see how these can be used.","category":"page"},{"location":"how-to-use/#Graph","page":"How to Use","title":"Graph","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The energy problem is defined using a graph. Each vertex is an asset and each edge is a flow.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"We use MetaGraphsNext.jl to define the graph and its objects. Using MetaGraphsNext we can define a graph with metadata, i.e., we can associate data to each asset and each flow. Furthermore, we can define the labels of each asset as keys to access the elements of the graph. The assets in the graph are of type GraphAssetData, and the flows are of type GraphFlowData.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The graph can be created using the create_graph_and_representative_periods_from_csv_folder function, or it can be accessed from an EnergyProblem.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"See how to use the graph in the graph tutorial.","category":"page"},{"location":"how-to-use/#GraphAssetData","page":"How to Use","title":"GraphAssetData","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This structure holds all the information of a given asset. These are stored inside the Graph. Given a graph graph and an asset a, it can be access through graph[a].","category":"page"},{"location":"how-to-use/#GraphFlowData","page":"How to Use","title":"GraphFlowData","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"This structure holds all the information of a given flow. These are stored inside the Graph. Given a graph graph and a flow (u, v), it can be access through graph[u, v].","category":"page"},{"location":"how-to-use/#Partition","page":"How to Use","title":"Partition","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A representative period will be defined with a number of time steps. A partition is a division of these time steps into time blocks such that the time blocks are disjunct and that all time steps belong to some time block. Some variables and constraints are defined over every time block in a partition.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"For instance, for a representative period with 12 time steps, all sets below are partitions:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10 11 12","category":"page"},{"location":"how-to-use/#representative-periods","page":"How to Use","title":"Representative Periods","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The full year is represented by a few periods of time, for instance, days or weeks, that nicely summarize other similar periods. For instance, we could model the year into 3 days, by clustering all days of the year into 3 representative days. Each one of these periods of time is called a representative period. They have been obtained by clustering through TulipaClustering.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A representative period was four fields:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"base_periods: indicates the periods of the full problem that map into this representative period, and the weight of the representative period in them.\nweight: indicates how many representative periods is contained in that year; this is inferred automatically from base_periods.\ntime_steps: The number of time steps in that year.\nresolution: The duration in time of a time step.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The number of time steps and resolution work together to define the coarseness of the period. Nothing is defined outside of these time steps, so, for instance, if the representative period represents a day, and you want to define a variable or constraint with coarseness of 30 minutes, then you need to define the number of time steps to 48 and the resolution to 0.5.","category":"page"},{"location":"how-to-use/#Solution","page":"How to Use","title":"Solution","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"The solution object is a NamedTuple with the following fields:","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"objective_value: A Float64 with the objective value at the solution.\nassets_investment[a]: The investment for each asset, indexed on the investable asset a.\nflows_investment[u, v]: The investment for each flow, indexed on the investable flow (u, v).\nflow[(u, v), rp, B]: The flow value for a given flow (u, v) at a given representative period rp, and time block B. The list of time blocks is defined by graph[(u, v)].partitions[rp].\nstorage_level[a, rp, B]: The storage level for the storage asset a for a representative period rp and a time block B. The list of time blocks is defined by constraints_partitions, which was used to create the model.","category":"page"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"For tips on manipulating the solution, check the tutorial.","category":"page"},{"location":"how-to-use/#time-blocks","page":"How to Use","title":"Time Blocks","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"A time block is a quantity of time for which a variable or constraint is defined. Currently, it is a range of numbers, i.e., all integer numbers inside an interval.","category":"page"},{"location":"features/#features","page":"Features","title":"Model Features","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"TulipaEnergyModel.jl incorporates two fundamental concepts that serve as the foundation of the optimization model:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Energy Assets: representation of a physical asset that can produce, consume, store, balance, or convert energy. Some examples of what these assets can represent are:\nProducer: e.g., wind turbine, solar panel\nConsumer: e.g., electricity demand, heat demand\nStorage: e.g., battery, pumped-hydro storage\nBalancing Hub: e.g., an electricity network that serves as a connection among other energy assets\nConversion: e.g., power plants, electrolyzers\nFlows: representation of the connections among assets, e.g., pipelines, transmission lines, or just simply the energy production that goes from one asset to another.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The model guarantees a balance of energy for the various types of assets while considering the flow limits. The mathematical formulation defines the flow variable (v^flow_frpk) as the instantaneous value (e.g., power in MW) for each flow f between two assets, representative period rp, and time step k. The time step k can represent a single time step (e.g., 1, 2, 3...) or a range of time steps (e.g., 1:3, meaning that the variable represents the value of time steps 1, 2 and 3). For more examples and details on this topic, refer to the section on flexible time resolution.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The following sections explain the main features of the optimization model based on all these concepts and definitions.","category":"page"},{"location":"features/#flex-asset-connection","page":"Features","title":"Flexible Connection of Energy Assets","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The representation of the energy system in TulipaEnergyModel.jl is based on Graph Theory, which deals with the connection between vertices by edges. This representation provides a more flexible framework to model energy assets in the system as vertices, and to model flows between energy assets as edges. In addition, it reduces the model size. For instance, connecting assets directly to each other, without having a node in between, allows us to reduce the number of variables and constraints to represent different configurations. For instance, it is becoming more and more common to have hybrid assets like storage + renewable (e.g., battery + solar), electrolyzer + renewable (e.g., electrolyzer + wind), or renewable + hydro (e.g., solar + hydro) that are located in the same site and share a common connection point to the grid. In hybrid configurations, for example, flows from the grid are typically not allowed as they either avoid charging from the grid or require green hydrogen production.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Consider the following example to demonstrate the benefits of this approach. In the classic connection approach, the nodes play a crucial role in modelling. For example, every asset needs to be connected to a node with balance constraints. When a storage asset and a renewable asset are in a hybrid connection like the one described before, a connection point is needed to connect the hybrid configuration to the rest of the system. Therefore, to consider the hybrid configuration of a storage asset and a renewable asset, we must introduce a node (i.e., a connection point) between these assets and the external power grid (i.e., a balance point), as shown in the following figure:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"(Image: Classic connection)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"In this system, the phs storage asset charges and discharges from the connection point, while the wind turbine produces power that also goes directly to the connection point. This connection point is connected to the external power grid through a transmission line that leads to a balance hub with/connecting to other assets. Essentially, the connection point acts as a balancing hub point for the assets in this hybrid configuration. Furthermore, these hybrid configurations impose an additional constraint to ensure that storage charges from the power grid are avoided. The section with comparison of different modeling approaches shows the quantification of these reductions.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Let's consider the modelling approach in TulipaEnergyModel.jl. As nodes are no longer needed to connect assets, we can connect them directly to each other as shown in the figure below:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"(Image: Flexible connection)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"By implementing this approach, we can reduce the number of variables and constraints involved in the process. For example, the balance constraint in the intermediate node is no longer needed, as well as the extra constraint to avoid the storage charging from the power grid.  Additionally, we can eliminate the variable that determines the flow between the intermediate node and the power grid because the flow from phs to balance can directly link to the external grid.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The example here shows the connection of a phs and a wind asset, illustrating the modelling approach's advantages and the example's reusability in the following sections. However, other applications of these co-location (or hybrid) combinations of assets are battery-solar, hydro-solar, and electrolyzer-wind.","category":"page"},{"location":"features/#flex-time-res","page":"Features","title":"Flexible Time Resolution","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"One of the core features of TulipaEnergyModel.jl is that it can handle different time resolutions on the assets and the flows. Typically, the time resolution in an energy model is hourly like in the following figure where we have a six-hour energy system:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"(Image: Hourly Time Resolution)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Therefore, for this simple example we can determine the number of constraints and variables in the optimization problem:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Number of variables: 42 since we have six connections among assets (i.e., 6 flows x 6 hours = 36 variables) and one storage asset (i.e., 6 storage level x 6 h = 6 variables)\nNumber of constraints: 72, where:\n24 from the maximum output limit of the assets that produce, convert, or discharge energy (i.e., H2, wind, ccgt, and phs) for each hour (i.e., 4 assets x 6 h = 24 constraints)\n6 from the maximum input limit of the storage or charging limit for the phs\n6 from the maximum storage level limit for the phs\n12 from the import and export limits for the transmission line between the balance hub and the demand\n24 from the energy balance on the consumer, hub, conversion, and storage assets (i.e., demand, balance, ccgt, and phs) for each hour (i.e., 4 assets x 6 h = 24 constraints)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Depending on the input data and the level of detail you want to model, hourly resolution in all the variables might not be necessary. TulipaEnergyModel.jl has the possibility to have different time resolutions for each asset and flow to simplify the optimization problem and approximate hourly representation. This feature is particularly useful for large-scale energy systems that involve different sectors, as detailed granularity is not always necessary due to the unique temporal dynamics of each sector. For instance, we can use hourly resolution for the electricity sector and six-hour resolution for the hydrogen sector. We can couple multiple sectors, each with its temporal resolution.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Let's explore the flexibility in the time resolution with the following examples. The following table shows the user input data for the asset time resolution definition. Please note that the values presented in this example are just for illustrative purposes and do not represent a realistic case.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"using DataFrames # hide\nusing CSV # hide\ninput_asset_file = \"../../test/inputs/Variable Resolution/assets-partitions.csv\" # hide\nassets = CSV.read(input_asset_file, DataFrame, header = 2) # hide\nassets = assets[assets.asset .!= \"wind\", :] # hide","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The definitions for the assets are determined in a file called assets-partitions.csv. For instance, the example in the file shows that both the H2 producer and the phs storage have a uniform definition of 6 hours. This means that we want to represent the H2 production profile and the storage level of the phs every six hours.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"If an asset is not specified in this file, the balance equation will be written in the lowest resolution of both incoming and outgoing flows to the asset. For example, the incoming and outgoing flows to the hub asset (balance) will determine how often the balance constraint is written.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The same type of definition can be done for the flows, for example (again, the values are for illustrative purposes and do not represent a realistic case):","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"input_flow_file = \"../../test/inputs/Variable Resolution/flows-partitions.csv\" # hide\nflows_partitions = CSV.read(input_flow_file, DataFrame, header = 2) # hide","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"These definitions are determined in the flows-partitions.csv file. The example shows a uniform definition for the flow from the hydrogen producer (H2) to the conversion asset (ccgt) of six hours, from the wind producer (wind) to the storage (phs) of three hours, and from the balance hub (balance) to the consumer (demand) of three hours, too. In addition, the flow from the wind producer (wind) to the balance hub (balance) is defined using the math specification of 1x2+1x4, meaning that there are two time blocks, one of two hours (i.e., 1:2) and another of four hours (i.e., 3:6). Finally, the flow from the storage (phs) to the balance hub (balance) is defined using the math specification of 1x4+1x2, meaning that there are two time blocks, one of four hours (i.e., 1:4) and another of two hours (i.e., 5:6).","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"If a flow is not specified in this file, the flow time resolution will be for each time step by default (e.g., hourly). For instance, the flow from the ccgt to the hub balance will be written hourly in this example.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The following figure illustrates these definition on the example.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"(Image: Variable Time Resolution)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"So, let's recap:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The hydrogen producer (H2) is in a six-hour resolution represented by the range 1:6, meaning that the balance of the hydrogen produced is for every six hours.\nThe flow from the hydrogen producer to the ccgt power plant (H2,ccgt) is also in a six-hour resolution 1:6.\nThe flow from the ccgt power plant to the balance hub (ccgt,balance) is in an hourly resolution [1,2,3,4,5,6].\nThe ccgt is a conversion plant that takes hydrogen to produce electricity. Since both sectors are in different time resolutions. The energy balance in the conversion asset is done in the lowest resolution connecting to the asset. In this case, the energy balance in the ccgt is done every six hours, i.e., in the range 1:6.\nThe wind producer has an hourly profile of electricity production, so the resolution of the asset is still hourly.\nThe wind producer output has two connections, one to the balance hub and the other to the pumped-hydro storage (phs) with different resolutions:\nThe flow from the wind producer to the phs storage (wind,phs) has a uniform resolution of two blocks from hour 1 to 3 (i.e., 1:3) and from hour 4 to 6 (i.e., 4:6).\nThe flow from the wind producer to the balance hub (wind,balance) has a variable resolution of two blocks, too, but from hour 1 to 2 (i.e., 1:2) and from hour 3 to 6 (i.e., 3:6).\nThe phs is in a six-hour resolution represented by the range 1:6, meaning the storage balance is determined every six hours.\nThe flow from the phs to the balance (phs,balance) represents the discharge of the phs. This flow has a variable resolution of two blocks from hour 1 to 4 (i.e., 1:4) and from hour 5 to 6 (i.e., 5:6), which differs from the one defined for the charging flow from the wind asset.\nThe demand consumption has hourly input data with one connection to the balance hub:\nThe flow from the balance hub to the demand (balance,demand) has a uniform resolution of three hours; therefore, it has two blocks, one from hour 1 to 3 (i.e., 1:3) and the other from hour 4 to 6 (i.e., 4:6).\nThe balance hub integrates all the different assets with their different resolutions. The lowest resolution of all connections determines the balance equation for this asset. Therefore, the resulting resolution is into two blocks, one from hour 1 to 4 (i.e., 1:4) and the other from hour 5 to 6 (i.e., 5:6). Notice that the resulting resolution comes from using the function compute_rp_partition, which applies a :greedy forward strategy to obtain the lowest resolution of all connecting assets. It is possible that other strategies, such as the backward strategy, could be helpful. However, these are outside the current scope of the model and may be the subject of future research.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Note: This example demonstrates that different time resolutions can be assigned to each asset and flow in the model. Additionally, the resolutions do not need to be uniform and can vary throughout the horizon.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The complete input data for this example can be found in the following link.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"For this basic example, we can describe what the balance and capacity constraints in the model look like. For the sake of simplicity, the representative period index is dropped from the equations and there is no investment variables in the equations.","category":"page"},{"location":"features/#Energy-Balance-Constraints","page":"Features","title":"Energy Balance Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"All balancing equations are defined in the lowest resolution to reduce the number of constraints in the optimization model.","category":"page"},{"location":"features/#Storage-Balance","page":"Features","title":"Storage Balance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Since the storage asset has a resolution of six hours and both the charging and discharging flows are higher than this, the storage balance constraint is defined in the exact resolution for the storage asset (i.e., the one with the lowest resolution). The charging and discharging flows are multiply by their durations to account for the energy in the range 1:6.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n storage_balance_phs16 \n qquad storage_level_phs16 = 3 cdot p^eff_(windphs) cdot flow_(windphs)13 \n qquad quad + 3 cdot p^eff_(windphs) cdot flow_(windphs)46 - frac4p^eff_(phsbalance) cdot flow_(phsbalance)14 \n qquad quad - frac2p^eff_(phsbalance) cdot flow_(phsbalance)56\nendaligned","category":"page"},{"location":"features/#Consumer-Balance","page":"Features","title":"Consumer Balance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The flows coming from the balancing hub are defined every three hours. Therefore, the flows impose the lowest resolution and the balance at the demand is done every three hours. The input demand is aggregated as the sum of the hourly values in the input data. As in the storage balance, the flows are multiplied by their duration.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n consumer_balance_demand13 \n qquad 3 cdot flow_(balancedemand)13 = p^peak_demand_demand cdot sum_k=1^3 p^profile_demandk \n consumer_balance_demand46 \n qquad 3 cdot flow_(balancedemand)46 = p^peak_demand_demand cdot sum_k=4^6 p^profile_demandk \nendaligned","category":"page"},{"location":"features/#Hub-Balance","page":"Features","title":"Hub Balance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The hub balance is quite interesting because it integrates several flow resolutions. Remember that we didn't define any specific time resolution for this asset. Therefore, the lowest resolution of all incoming and outgoing flows in the horizon implies that the hub balance must be imposed for two blocks, 1:4 and 5:6. The balance must account for each flow variable's duration in each block.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n hub_balance_balance14 \n qquad sum_k=1^4 flow_(ccgtbalance)k + 2 cdot flow_(windbalance)12 \n qquad + 2 cdot flow_(windbalance)36 + 4 cdot flow_(phsbalance)14 \n qquad - 3 cdot flow_(balancedemand)13 - 1 cdot flow_(balancedemand)46 = 0 \n hub_balance_balance56 \n qquad sum_k=5^6 flow_(ccgtbalance)k + 2 cdot flow_(windbalance)36 \n qquad + 2 cdot flow_(phsbalance)56 - 2 cdot flow_(balancedemand)46 = 0 \nendaligned","category":"page"},{"location":"features/#Conversion-Balance","page":"Features","title":"Conversion Balance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The flows connected to the CCGT conversion unit have different resolutions, too. In this case, the hydrogen imposes the lowest resolution, therefore the energy balance in this asset is also for every six hours.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n conversion_balance_ccgt16 \n 6 cdot p^eff_(H2ccgt) cdot flow_(H2ccgt)16 = frac1p^eff_(ccgtbalance) sum_k=1^6 flow_(ccgtbalance)k  \nendaligned","category":"page"},{"location":"features/#Capacity-Constraints","page":"Features","title":"Capacity Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"All capacity constraints are defined in the highest resolution to guarantee that the flows are below the limits of each asset capacity.","category":"page"},{"location":"features/#Storage-Capacity-Constraints","page":"Features","title":"Storage Capacity Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Since the storage unit only has one input and output, the capacity limit constraints are in the exact resolution as the individual flows. Therefore, The constraints for the outputs of the storage are (i.e., discharging capacity limit):","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_output_flows_limit_phs13 \n qquad flow_(phsbalance)13 leq p^init_capacity_phs \n max_output_flows_limit_phs46 \n qquad flow_(phsbalance)46 leq p^init_capacity_phs \nendaligned","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"And, the constraints for the inputs of the storage are (i.e., charging capacity limit):","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_input_flows_limit_phs14 \n qquad flow_(phsbalance)14 leq p^init_capacity_phs \n max_input_flows_limit_phs56 \n qquad flow_(phsbalance)56 leq p^init_capacity_phs \nendaligned","category":"page"},{"location":"features/#Conversion-Capacity-Constraints","page":"Features","title":"Conversion Capacity Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Similarly, each outflow is limited to the ccgt capacity for the conversion unit.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_output_flows_limit_ccgtk \n qquad flow_(ccgtbalance)k leq p^init_capacity_ccgt quad forall k in 16 \nendaligned","category":"page"},{"location":"features/#Producers-Capacity-Constraints","page":"Features","title":"Producers Capacity Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The wind producer asset is interesting because the output flows are in different resolutions. Therefore, the highest resolution rule imposes that we have three constraints as follows:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_output_flows_limit_wind12 \n qquad flow_(windbalance)12 + flow_(windphs)13 leq fracp^init_capacity_wind2 cdot sum_k=1^2 p^profile_windk \n max_output_flows_limit_wind3 \n qquad flow_(windbalance)36 + flow_(windphs)13 leq p^init_capacity_wind cdot p^profile_wind3 \n max_output_flows_limit_wind46 \n qquad flow_(windbalance)36 + flow_(windphs)46 leq fracp^init_capacity_wind2 cdot sum_k=5^6 p^profile_windk \nendaligned","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Since the flow variables $flow_{(wind,balance),1:2}$ and $flow_{(wind,balance),1:3}$ represent power, the first constraint sets the upper bound of the power for both time step 1 and 2, by assuming an average capacity across these two time steps. The same applies to the other two constraints.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The hydrogen (H2) producer capacity limit is straightforward since both the asset and the flow definition are in the exact time resolution:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_output_flows_limit_H216 \n qquad flow_(H2ccgt)16 leq p^init_capacity_wind cdot p^profile_H216 \nendaligned","category":"page"},{"location":"features/#Transport-Capacity-Constraints","page":"Features","title":"Transport Capacity Constraints","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"For the connection from the hub to the demand there are associated transmission capacity constraints, which are in the same resolution as the flow:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_transport_flows_limit_(balancedemand)13 \n qquad flow_(balancedemand)13 leq p^init_export_capacity_(balancedemand) \n max_transport_flows_limit_(balancedemand)46 \n qquad flow_(balancedemand)46 leq p^init_export_capacity_(balancedemand) \nendaligned","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n min_transport_flows_limit_(balancedemand)13 \n qquad flow_(balancedemand)13 geq - p^init_import_capacity_(balancedemand) \n min_transport_flows_limit_(balancedemand)46 \n qquad flow_(balancedemand)46 geq - p^init_import_capacity_(balancedemand) \nendaligned","category":"page"},{"location":"features/#Storage-Level-limits","page":"Features","title":"Storage Level limits","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Since we have a storage asset in the system, we need to limit the maximum storage level. The phs time resolution is defined for each six hours, so we only have one constraint.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"beginaligned\n max_storage_level_limit_phs16 \n qquad storage_level_phs16 = p^init_storage_capacity_phs\nendaligned","category":"page"},{"location":"features/#comparison","page":"Features","title":"Comparison of Different Modeling Approaches","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"This section quantifies the advantages of the flexible connection and flexible time resolution in the TulipaEnergyModel.jl modelling approach. So, let us consider three different approaches based on the same example:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Classic approach with hourly resolution: This approach needs an extra asset, called node, to create the hybrid operation of the phs and wind assets.\nFlexible connection with hourly resolution: This approach uses the flexible connection to represent the hybrid operation of the  phs and wind assets.\nFlexible connection and time resolution: This approach uses both features, the flexible connection and the flexible time resolution.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Note: TulipaEnergyModel.jl is flexible enough to allow any of these three approaches to the model through the input data.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The table below shows the number of constraints and variables for each approach over a six-hour horizon. This highlights the potential of flexible time resolution in reducing the size of the optimization model.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Modeling approach Nº Variables Nº Constraints Objective Function\nClassic approach with hourly resolution 48 84 28.4365\nFlexible connection with hourly resolution 42 72 28.4365\nFlexible connection and time resolution 16 25 28.4587","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"By comparing the classic approach with the other methods, we can analyze their differences:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The flexible connection with hourly resolution reduces 6 variables (125) and 12 constraints (approx 14). The objective function is the same since in both cases we use an hourly time resolution.\nThe combination of features reduces 32 variables (approx 67) and 59 constraints (approx 70) with an approximation error of approx 0073.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"The level of reduction and approximation error will depend on each case. The example demonstrates the potential for reduction and accuracy using the flexible time resolution feature in TulipaEnergyModel.jl. Some use cases for this feature include:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Coupling different energy sectors with different dynamics. For instance, methane, hydrogen, and heat sectors can be represented in energy models with lower resolutions (e.g. 4, 6, or 12h) than the electricity sector, usually modeled in higher resolutions (e.g., 1h, 30 min).\nIt may not be necessary to have highly detailed resolutions for all your assets in a large-scale electricity case study. For example, if you are analyzing a European case study that focuses on a specific country like The Netherlands, you may not require hourly details for distant countries. However, you would still want to consider their effect, such as Portugal and Spain. In such cases, flexible time resolution can help you maintain hourly details for assets in your focus country while reducing the detail in distant countries by increasing their resolution to two hours or more, depending on the desired level of accuracy. This will reduce the variables in the assets of the distant country.","category":"page"},{"location":"mathematical-formulation/#math-formulation","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This section shows the mathematical formulation of the model assuming that the temporal definition of time steps is the same for all the elements in the model.\nThe full mathematical formulation considering variable temporal resolutions is also freely available in the preprint. In addition, the feature section has an example on how the flexible time resolution is handled in the model.","category":"page"},{"location":"mathematical-formulation/#math-sets","page":"Mathematical Formulation","title":"Sets","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements\nmathcalA Energy assets a in mathcalA\nmathcalA_c Consumer energy assets mathcalA_c        subseteq mathcalA\nmathcalA_p Producer energy assets mathcalA_p        subseteq mathcalA\nmathcalA_s Storage energy assets mathcalA_s        subseteq mathcalA\nmathcalA_h Hub energy assets (e.g., transshipment) mathcalA_h        subseteq mathcalA\nmathcalA_cv Conversion energy assets mathcalA_cv     subseteq mathcalA\nmathcalA_i Energy assets with investment method mathcalA_i        subseteq mathcalA\nmathcalF Flow connections between two assets f in mathcalF\nmathcalF_t Transport flow between two assets mathcalF_t        subseteq mathcalF\nmathcalF_i Transport flow with investment method mathcalF_i        subseteq mathcalF_t\nmathcalF_in(a) Set of flows going into asset a mathcalF_in(a)  subseteq mathcalF\nmathcalF_out(a) Set of flows going out of asset a mathcalF_out(a) subseteq mathcalF\nmathcalRP Representative periods rp in mathcalRP\nmathcalK Time steps within the rp k  in mathcalK","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"NOTE: Asset types are mutually exclusive.","category":"page"},{"location":"mathematical-formulation/#math-parameters","page":"Mathematical Formulation","title":"Parameters","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Description Units\np^investment_cost_a mathcalA_i Investment cost  of asset units [kEUR/MW/year]\np^investment_limit_a mathcalA_i Investment limit of asset units [MW]\np^unit_capacity_a mathcalA Capacity of asset units [MW]\np^peak_demand_a mathcalA_c Peak demand [MW]\np^init_capacity_a mathcalA Initial capacity of asset units [MW]\np^investment_cost_f mathcalF_i Investment cost  of flow connections [kEUR/MW/year]\np^variable_cost_f mathcalF Variable cost of flow connections [kEUR/MWh]\np^unit_capacity_f mathcalF_t Capacity increment for flow connections investment (both exports and imports) [MW]\np^init_export_capacity_f mathcalF_t Initial export capacity of flow connections [MW]\np^init_import_capacity_f mathcalF_t Initial import capacity of flow connections [MW]\np^rp_weight_rp mathcalRP Representative period weight [h]\np^profile_arpk mathcalARPK Asset profile [p.u.]\np^profile_frpk mathcalFRPK Flow connections profile [p.u.]\np^ene_to_pow_ratio_a mathcalA_s Energy to power ratio [h]\np^init_storage_level_a mathcalA_s Initial storage level [MWh]\np^inflow_a mathcalA_s Energy storage inflows [MWh]\np^eff_f mathcalF Flow efficiency [p.u.]","category":"page"},{"location":"mathematical-formulation/#math-variables","page":"Mathematical Formulation","title":"Variables","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Domain Description Units\nv^flow_frpk  in mathbbR mathcalFRPK Flow between two assets [MW]\nv^investment_a in mathbbZ^+ mathcalA_i Number of installed asset units [units]\nv^investment_f in mathbbZ^+ mathcalF_i Number of installed units between two assets [units]\ns^level_arpk in mathbbR mathcalA_sRPK Storage level [MWh]","category":"page"},{"location":"mathematical-formulation/#math-objective-function","page":"Mathematical Formulation","title":"Objective Function","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Objective function:","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\ntextminimize quad  assets_investment_cost + flows_investment_cost \n                         + flows_variable_cost\nendaligned","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Where:","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nassets_investment_cost = sum_a in mathcalAi p^investment_cost_a cdot p^unit_capacity_a cdot v^investment_a \nflows_investment_cost = sum_f in mathcalFi p^investment_cost_f cdot p^unit_capacity_f cdot v^investment_f \nflows_variable_cost = sum_f in mathcalF sum_rp in mathcalRP sum_k in mathcalK p^rp_weight_rp cdot p^variable_cost_f cdot v^flow_frpk\nendaligned","category":"page"},{"location":"mathematical-formulation/#math-constraints","page":"Mathematical Formulation","title":"Constraints","text":"","category":"section"},{"location":"mathematical-formulation/#Balancing-Contraints-for-Asset-Type","page":"Mathematical Formulation","title":"Balancing Contraints for Asset Type","text":"","category":"section"},{"location":"mathematical-formulation/#Constraints-for-Consumers-Energy-Assets-\\mathcal{A}_c","page":"Mathematical Formulation","title":"Constraints for Consumers Energy Assets mathcalA_c","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_in(a) v^flow_frpk - sum_f in mathcalF_out(a) v^flow_frpk = p^profile_arpk cdot p^peak_demand_a quad\n  forall a in mathcalA_c forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Constraints-for-Storage-Energy-Assets-\\mathcal{A}_s","page":"Mathematical Formulation","title":"Constraints for Storage Energy Assets mathcalA_s","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\ns_arpk^level = s_arpk-1^level + p_arpk^inflow + sum_f in mathcalF_in(a) p^eff_f cdot v^flow_frpk - sum_f in mathcalF_out(a) frac1p^eff_f cdot v^flow_frpk quad\n  forall a in mathcalA_s forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Constraints-for-Hub-Energy-Assets-\\mathcal{A}_h","page":"Mathematical Formulation","title":"Constraints for Hub Energy Assets mathcalA_h","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_in(a) v^flow_frpk = sum_f in mathcalF_out(a) v^flow_frpk quad\n  forall a in mathcalA_h forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Constraints-for-Conversion-Energy-Assets-\\mathcal{A}_{cv}","page":"Mathematical Formulation","title":"Constraints for Conversion Energy Assets mathcalA_cv","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_in(a) p^eff_f cdot v^flow_frpk = sum_f in mathcalF_out(a) fracv^flow_frpkp^eff_f  quad\n  forall a in mathcalA_cv forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Constraints-that-Define-Capacity-Limits-of-Flows-Related-to-Energy-Assets-\\mathcal{A}","page":"Mathematical Formulation","title":"Constraints that Define Capacity Limits of Flows Related to Energy Assets mathcalA","text":"","category":"section"},{"location":"mathematical-formulation/#Maximum-Output-Flows-Limit","page":"Mathematical Formulation","title":"Maximum Output Flows Limit","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_out(a) v^flow_frpk leq p^profile_arpk cdot left(p^init_capacity_a + p^unit_capacity_a cdot v^investment_a right)  quad\n  forall a in mathcalA_cv cup mathcalA_s cup mathcalA_p forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Maximum-Input-Flows-Limit","page":"Mathematical Formulation","title":"Maximum Input Flows Limit","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_in(a) v^flow_frpk leq p^profile_arpk cdot left(p^init_capacity_a + p^unit_capacity_a cdot v^investment_a right)  quad\n  forall a in mathcalA_s forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Lower-Bound-Constraint-Flows-Associated-with-Asset","page":"Mathematical Formulation","title":"Lower Bound Constraint Flows Associated with Asset","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^flow_frpk geq 0 quad forall f notin mathcalF_t forall rp in mathcalRP forall k in mathcalk","category":"page"},{"location":"mathematical-formulation/#Constraints-that-Define-Capacity-Limits-for-a-Transport-Flow-\\mathcal{F}_t","page":"Mathematical Formulation","title":"Constraints that Define Capacity Limits for a Transport Flow mathcalF_t","text":"","category":"section"},{"location":"mathematical-formulation/#Maximum-Transport-Flow-Limit","page":"Mathematical Formulation","title":"Maximum Transport Flow Limit","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^flow_frpk leq p^profile_frpk cdot left(p^init_export_capacity_f + p^unit_capacity_f cdot v^investment_f right)  quad\n  forall f in mathcalF_t forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Minimum-Transport-Flow-Limit","page":"Mathematical Formulation","title":"Minimum Transport Flow Limit","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^flow_frpk geq - p^profile_frpk cdot left(p^init_import_capacity_f + p^unit_capacity_f cdot v^investment_f right)  quad\n  forall f in mathcalF_t forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Extra-Constraints-for-Energy-Storage-Assets-\\mathcal{A}_s","page":"Mathematical Formulation","title":"Extra Constraints for Energy Storage Assets mathcalA_s","text":"","category":"section"},{"location":"mathematical-formulation/#Maximum-Storage-Level-Limit","page":"Mathematical Formulation","title":"Maximum Storage Level Limit","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"0 leq s_arpk^level leq p^init_storage_capacity_a + p^ene_to_pow_ratio_a cdot p^unit_capacity_a cdot v^investment_a quad\n  forall a in mathcalA_s forall rp in mathcalRPforall k in mathcalK","category":"page"},{"location":"mathematical-formulation/#Cycling-Constraints-for-Storage-Level","page":"Mathematical Formulation","title":"Cycling Constraints for Storage Level","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"s_arpk=K^level geq p^init_storage_level_a quad\n  forall a in mathcalA_s forall rp in mathcalRP","category":"page"},{"location":"mathematical-formulation/#Extra-Constraints-for-Investments","page":"Mathematical Formulation","title":"Extra Constraints for Investments","text":"","category":"section"},{"location":"mathematical-formulation/#Maximum-Investment-Limit-for-\\mathcal{A}_i","page":"Mathematical Formulation","title":"Maximum Investment Limit for mathcalA_i","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^investment_a leq fracp^investment_limit_a p^unit_capacity_a quad\n  forall a in mathcalA_i","category":"page"},{"location":"mathematical-formulation/#Maximum-Investment-Limit-for-\\mathcal{F}_i","page":"Mathematical Formulation","title":"Maximum Investment Limit for mathcalF_i","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^investment_f leq fracp^investment_limit_fp^unit_capacity_f quad\n  forall f in mathcalF_i","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​This is a comprehensive list of all of the functions in the model.\nThe function most pertinent to the user is: run_scenario","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [TulipaEnergyModel]","category":"page"},{"location":"reference/#TulipaEnergyModel.AssetData","page":"Reference","title":"TulipaEnergyModel.AssetData","text":"Schema for the assets-data.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.AssetPartitionData","page":"Reference","title":"TulipaEnergyModel.AssetPartitionData","text":"Schema for the assets-partitions.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.AssetProfiles","page":"Reference","title":"TulipaEnergyModel.AssetProfiles","text":"Schema for the assets-profiles.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.EnergyProblem","page":"Reference","title":"TulipaEnergyModel.EnergyProblem","text":"Structure to hold all parts of an energy problem.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.FlowData","page":"Reference","title":"TulipaEnergyModel.FlowData","text":"Schema for the flows-data.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.FlowPartitionData","page":"Reference","title":"TulipaEnergyModel.FlowPartitionData","text":"Schema for the flows-partitions.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.FlowProfiles","page":"Reference","title":"TulipaEnergyModel.FlowProfiles","text":"Schema for the flows-profiles file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.GraphAssetData","page":"Reference","title":"TulipaEnergyModel.GraphAssetData","text":"Structure to hold the asset data in the graph.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.GraphFlowData","page":"Reference","title":"TulipaEnergyModel.GraphFlowData","text":"Structure to hold the flow data in the graph.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.RepPeriodData","page":"Reference","title":"TulipaEnergyModel.RepPeriodData","text":"Schema for the rep-period-data.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.RepPeriodMapping","page":"Reference","title":"TulipaEnergyModel.RepPeriodMapping","text":"Schema for the rep-periods-mapping.csv file.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel.RepresentativePeriod","page":"Reference","title":"TulipaEnergyModel.RepresentativePeriod","text":"Structure to hold the data of one representative period.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TulipaEnergyModel._parse_rp_partition","page":"Reference","title":"TulipaEnergyModel._parse_rp_partition","text":"_parse_rp_partition(Val(specification), time_step_string, rp_time_steps)\n\nParses the timestepstring according to the specification. The representative period time steps (rp_time_steps) might not be used in the computation, but it will be used for validation.\n\nThe specification defines what is expected from the time_step_string:\n\n:uniform: The time_step_string should be a single number indicating the duration of each block. Examples: \"3\", \"4\", \"1\".\n:explicit: The time_step_string should be a semicolon-separated list of integers. Each integer is a duration of a block. Examples: \"3;3;3;3\", \"4;4;4\", \"1;1;1;1;1;1;1;1;1;1;1;1\", and \"3;3;4;2\".\n:math: The time_step_string should be an expression of the form NxD+NxD…, where D is the duration of the block and N is the number of blocks. Examples: \"4x3\", \"3x4\", \"12x1\", and \"2x3+1x4+1x2\".\n\nThe generated blocks will be ranges (a:b). The first block starts at 1, and the last block ends at length(rp_time_steps).\n\nThe following table summarizes the formats for a rp_time_steps = 1:12:\n\nOutput :uniform :explicit :math\n1:3, 4:6, 7:9, 10:12 3 3;3;3;3 4x3\n1:4, 5:8, 9:12 4 4;4;4 3x4\n1:1, 2:2, …, 12:12 1 1;1;1;1;1;1;1;1;1;1;1;1 12x1\n1:3, 4:6, 7:10, 11:12 NA 3;3;4;2 2x3+1x4+1x2\n\nExamples\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:uniform), \"3\", 1:12)\n\n# output\n\n4-element Vector{UnitRange{Int64}}:\n 1:3\n 4:6\n 7:9\n 10:12\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:explicit), \"4;4;4\", 1:12)\n\n# output\n\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:12\n\nusing TulipaEnergyModel\nTulipaEnergyModel._parse_rp_partition(Val(:math), \"2x3+1x4+1x2\", 1:12)\n\n# output\n\n4-element Vector{UnitRange{Int64}}:\n 1:3\n 4:6\n 7:10\n 11:12\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.compute_assets_partitions!-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.compute_assets_partitions!","text":"compute_assets_partitions!(partitions, df, a, representative_periods)\n\nParses the time blocks in the DataFrame df for the asset a and every representative period in the time_steps_per_rp dictionary, modifying the input partitions.\n\npartitions must be a dictionary indexed by the representative periods, possibly empty.\n\ntime_steps_per_rp must be a dictionary indexed by rp and its values are the time steps of that rp.\n\nTo obtain the partitions, the columns specification and partition from df are passed to the function _parse_rp_partition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_constraints_partitions-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.compute_constraints_partitions","text":"cons_partitions = compute_constraints_partitions(graph, representative_periods)\n\nComputes the constraints partitions using the assets and flows partitions stored in the graph, and the representative periods.\n\nThe function computes the constraints partitions by iterating over the partition dictionary, which specifies the partition strategy for each resolution (i.e., lowest or highest). For each asset and representative period, it calls the compute_rp_partition function to compute the partition based on the strategy.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_flows_partitions!-NTuple{5, Any}","page":"Reference","title":"TulipaEnergyModel.compute_flows_partitions!","text":"compute_flows_partitions!(partitions, df, u, v, representative_periods)\n\nParses the time blocks in the DataFrame df for the flow (u, v) and every representative period in the time_steps_per_rp dictionary, modifying the input partitions.\n\npartitions must be a dictionary indexed by the representative periods, possibly empty.\n\ntime_steps_per_rp must be a dictionary indexed by rp and its values are the time steps of that rp.\n\nTo obtain the partitions, the columns specification and partition from df are passed to the function _parse_rp_partition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.compute_rp_partition-Tuple{AbstractVector{<:AbstractVector{<:UnitRange{<:Integer}}}}","page":"Reference","title":"TulipaEnergyModel.compute_rp_partition","text":"rp_partition = compute_rp_partition(partitions; strategy = :greedy)\n\nGiven the time steps of various flows/assets in the partitions input, compute the representative period partitions.\n\nEach element of partitions is a partition with the following assumptions:\n\nAn element is of the form V = [r₁, r₂, …, rₘ], where each rᵢ is a range a:b.\nr₁ starts at 1.\nrᵢ₊₁ starts at the end of rᵢ plus 1.\nrₘ ends at some value N, that is the same for all elements of partitions.\n\nNotice that this implies that they form a disjunct partition of 1:N.\n\nThe output will also be a partition with the conditions above.\n\nStrategies\n\n:greedy\n\nIf strategy = :greedy (default), then the output is constructed greedily, i.e., it selects the next largest breakpoint following the algorithm below:\n\nInput: Vᴵ₁, …, Vᴵₚ, a list of time blocks. Each element of Vᴵⱼ is a range r = r.start:r.end. Output: V.\nCompute the end of the representative period N (all Vᴵⱼ should have the same end)\nStart with an empty V = []\nDefine the beginning of the range s = 1\nDefine an array with all the next breakpoints B such that Bⱼ is the first r.end such that r.end ≥ s for each r ∈ Vᴵⱼ.\nThe end of the range will be the e = max Bⱼ.\nDefine r = s:e and add r to the end of V.\nIf e = N, then END\nOtherwise, define s = e + 1 and go to step 4.\n\nExamples\n\npartition1 = [1:4, 5:8, 9:12]\npartition2 = [1:3, 4:6, 7:9, 10:12]\ncompute_rp_partition([partition1, partition2])\n\n# output\n\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:12\n\npartition1 = [1:1, 2:3, 4:6, 7:10, 11:12]\npartition2 = [1:2, 3:4, 5:5, 6:7, 8:9, 10:12]\ncompute_rp_partition([partition1, partition2])\n\n# output\n\n5-element Vector{UnitRange{Int64}}:\n 1:2\n 3:4\n 5:6\n 7:10\n 11:12\n\n:all\n\nIf strategy = :all, then the output selects includes all the breakpoints from the input. Another way of describing it, is to select the minimum end-point instead of the maximum end-point in the :greedy strategy.\n\nExamples\n\npartition1 = [1:4, 5:8, 9:12]\npartition2 = [1:3, 4:6, 7:9, 10:12]\ncompute_rp_partition([partition1, partition2]; strategy = :all)\n\n# output\n\n6-element Vector{UnitRange{Int64}}:\n 1:3\n 4:4\n 5:6\n 7:8\n 9:9\n 10:12\n\npartition1 = [1:1, 2:3, 4:6, 7:10, 11:12]\npartition2 = [1:2, 3:4, 5:5, 6:7, 8:9, 10:12]\ncompute_rp_partition([partition1, partition2]; strategy = :all)\n\n# output\n\n10-element Vector{UnitRange{Int64}}:\n 1:1\n 2:2\n 3:3\n 4:4\n 5:5\n 6:6\n 7:7\n 8:9\n 10:10\n 11:12\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_energy_problem_from_csv_folder-Tuple{AbstractString}","page":"Reference","title":"TulipaEnergyModel.create_energy_problem_from_csv_folder","text":"energy_problem = create_energy_problem_from_csv_folder(input_folder)\n\nReturns the TulipaEnergyModel.EnergyProblem reading all data from CSV files in the input_folder. This is a wrapper around create_graph_and_representative_periods_from_csv_folder that creates the EnergyProblem structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_graph_and_representative_periods_from_csv_folder-Tuple{AbstractString}","page":"Reference","title":"TulipaEnergyModel.create_graph_and_representative_periods_from_csv_folder","text":"graph, representative_periods = create_graph_and_representative_periods_from_csv_folder(input_folder)\n\nReturns the graph structure that holds all data, and the representative_periods array. The following files are expected to exist in the input folder:\n\nassets-data.csv: Following the TulipaEnergyModel.AssetData specification.\nassets-profiles.csv: Following the TulipaEnergyModel.AssetProfiles specification. The profiles should be ordered by time step.\nassets-paritions.csv: Following the TulipaEnergyModel.AssetPartitionData specification.\nflows-data.csv: Following the TulipaEnergyModel.FlowData specification.\nflows-profiles.csv: Following the TulipaEnergyModel.FlowProfiles specification. The profiles should be ordered by time step.\nflows-paritions.csv: Following the TulipaEnergyModel.FlowPartitionData specification.\nrep-periods-data.csv: Following the TulipaEnergyModel.RepPeriodData specification.\n\nThe returned structures are:\n\ngraph: a MetaGraph with the following information:\nlabels(graph): All assets.\nedge_labels(graph): All flows, in pair format (u, v), where u and v are assets.\ngraph[a]: A TulipaEnergyModel.GraphAssetData structure for asset a.\ngraph[u, v]: A TulipaEnergyModel.GraphFlowData structure for flow (u, v).\nrepresentative_periods: An array of TulipaEnergyModel.RepresentativePeriod ordered by their IDs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_model!-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.create_model!","text":"create_model!(energy_problem)\n\nCreate the internal model of an TulipaEnergyModel.EnergyProblem.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_model-Tuple{Any, Any, Any}","page":"Reference","title":"TulipaEnergyModel.create_model","text":"model = create_model(graph, representative_periods, constraints_partitions)\n\nCreate the energy model given the graph, representativeperiods, and constraintspartitions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.default_parameters-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.default_parameters","text":"default_parameters(Val(optimizer_name_symbol))\ndefault_parameters(optimizer)\ndefault_parameters(optimizer_name_symbol)\ndefault_parameters(optimizer_name_string)\n\nReturns the default parameters for a given JuMP optimizer. Falls back to Dict() for undefined solvers.\n\nArguments\n\nThere are four ways to use this function:\n\nVal(optimizer_name_symbol): This uses type dispatch with the special Val type. Just give the solver name as a Symbol (e.g., Val(:HiGHS)).\noptimizer: The JuMP optimizer type (e.g., HiGHS.Optimizer).\noptimizer_name_symbol or optimizer_name_string: Just give the name in Symbol or String format and we will convert to Val.\n\nUsing Val is necessary for the dispatch. All other cases will convert the argument and call the Val version, which might lead to some type instability.\n\nExamples\n\nusing HiGHS\ndefault_parameters(HiGHS.Optimizer)\n\n# output\n\nDict{String, Any} with 1 entry:\n  \"output_flag\" => false\n\nThis also\n\ndefault_parameters(Val(:SCIP))\n\n# output\n\nDict{String, Any} with 1 entry:\n  \"display/verblevel\" => 0\n\ndefault_parameters(:SCIP) == default_parameters(\"SCIP\") == default_parameters(Val(:SCIP))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.read_csv_with_schema-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.read_csv_with_schema","text":"read_csv_with_schema(file_path, schema)\n\nReads the csv with file_name at location path validating the data using the schema. It assumes that the file's header is at the second row. The first row of the file contains some metadata information that is not used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.run_scenario","page":"Reference","title":"TulipaEnergyModel.run_scenario","text":"run_scenario(input_folder[, output_folder; optimizer, parameters])\n\nRun the scenario in the given input_folder and return the sets, parameters, and solution. The output_folder is optional. If it is specified, save the sets, parameters, and solution to the output_folder.\n\nThe optimizer and parameters keyword arguments can be used to change the default optimizer (which is HiGHS) and its parameters. The variables are passed to the solve_model function.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.save_solution_to_file-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.save_solution_to_file","text":"save_solution_to_file(output_file, graph)\n\nSaves the solution in CSV files inside output_folder.\n\nThe following files are created:\n\ninvestment.csv: The format of each row is a,v,p*v, where a is the asset name, v is the corresponding asset investment value, and p is the corresponding capacity value. Only investable assets are included.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.save_solution_to_file-Tuple{Any, TulipaEnergyModel.EnergyProblem}","page":"Reference","title":"TulipaEnergyModel.save_solution_to_file","text":"save_solution_to_file(output_folder, energy_problem)\n\nSaves the solution from energy_problem in CSV files inside output_file.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.solve_model","page":"Reference","title":"TulipaEnergyModel.solve_model","text":"solution = solve_model(model[, optimizer; parameters])\n\nSolve the JuMP model and return the solution. The optimizer argument should be a MILP solver from the JuMP list of supported solvers. By default we use HiGHS.\n\nThe keyword argument parameters should be passed as a list of key => value pairs.\n\nThe solution object is a NamedTuple with the following fields:\n\nobjective_value: A Float64 with the objective value at the solution.\nassets_investment[a]: The investment for each asset, indexed on the investable asset a. To create a traditional array in the order given by the investable assets, one can run\n[solution.assets_investment[a] for a in labels(graph) if graph[a].investable]\nflows_investment[u, v]: The investment for each flow, indexed on the investable flow (u, v). To create a traditional array in the order given by the investable flows, one can run\n[solution.flows_investment[(u, v)] for (u, v) in edge_labels(graph) if graph[u, v].investable]\nflow[(u, v), rp, B]: The flow value for a given flow (u, v) at a given representative period rp, and time block B. The list of time blocks is defined by graph[(u, v)].partitions[rp]. To create a vector with all values of flow for a given (u, v) and rp, one can run\n[solution.flow[(u, v), rp, B] for B in graph[u, v].partitions[rp]]\nstorage_level[a, rp, B]: The storage level for the storage asset a for a representative period rp and a time block B. The list of time blocks is defined by constraints_partitions, which was used to create the model. To create a vector with the all values of storage_level for a given a and rp, one can run\n[solution.storage_level[a, rp, B] for B in constraints_partitions[:lowest_resolution][(a, rp)]]\n\nExamples\n\nparameters = [\"presolve\" => \"on\", \"time_limit\" => 60.0, \"output_flag\" => true]\nsolution = solve_model(model, HiGHS.Optimizer; parameters = parameters)\n\n\n\n\n\n","category":"function"},{"location":"reference/#TulipaEnergyModel.solve_model!","page":"Reference","title":"TulipaEnergyModel.solve_model!","text":"solution = solve_model!(energy_problem[, optimizer; parameters])\n\nSolve the internal model of an energyproblem. The solution obtained by calling [`solvemodel`](@ref) is returned.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TulipaEnergyModel","category":"page"},{"location":"#home","page":"Home","title":"TulipaEnergyModel.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TulipaEnergyModel.jl is an optimization model for the electricity market and its coupling with other energy sectors (e.g., hydrogen, heat, natural gas, etc.). The optimization model determines the optimal investment and operation decisions for different types of assets (e.g., producers, consumers, conversion, storage, and transport). TulipaEnergyModel.jl is developed in Julia and depends on the JuMP.jl package.","category":"page"},{"location":"#license","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This content is released under the Apache License 2.0 License.","category":"page"},{"location":"#bugs-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, please start an issue or a discussion on the topic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to ask a question unsuitable for a bug report, start a discussion here. This forum is for general discussion about the repository TulipaEnergyModel.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"features.md\",\"mathematical-formulation.md\",\"how-to-use.md\",\"tutorial.md\",\"api.md\",\"reference.md\"]","category":"page"},{"location":"tutorial/#tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here are some tutorials on how to use Tulipa.","category":"page"},{"location":"tutorial/#basic-example","page":"Tutorial","title":"Basic example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For our first example, let's use a very small existing dataset. Inside the code for this package, you can find the folder test/inputs/Tiny, which includes all the files necessary to create a TulipaEnergyModel and solve it.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"There are 8 files inside the \"Tiny\" folder. They define the assets and flows data, their profiles, and their time resolution. Furthermore, there are two files to define the representative periods and which periods in the full problem formulation they stand for. For more details on what are these files mean, see Input","category":"page"},{"location":"tutorial/#Run-scenario","page":"Tutorial","title":"Run scenario","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To read all data from the Tiny folder, perform all necessary steps to create a model and solve it, use the following snippet:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny\nenergy_problem = run_scenario(input_dir)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The energy_problem variable is of type EnergyProblem. For more details, see the documentation for that type, or the section Structures.","category":"page"},{"location":"tutorial/#Manually-running-each-step","page":"Tutorial","title":"Manually running each step","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If we need more control, we can create the energy problem first, then the optimization model inside it, and finally ask for it to be solved.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny\nenergy_problem = create_energy_problem_from_csv_folder(input_dir)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The energy problem does not have a model yet:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"energy_problem.model === nothing","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create the internal model, we call the function create_model!.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"create_model!(energy_problem)\nenergy_problem.model","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The model has not been solved yet, which can be verified through the solved flag inside the energy problem:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"energy_problem.solved","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, we can solve the model:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"solution = solve_model!(energy_problem)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The solution is included in the individual assets and flows, but for completeness, we return the full solution object, also defined in the Structures section.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In particular, the objective value and the termination status are also included in the energy problem:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"energy_problem.objective_value, energy_problem.termination_status","category":"page"},{"location":"tutorial/#Manually-creating-all-structures-without-EnergyProblem","page":"Tutorial","title":"Manually creating all structures without EnergyProblem","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For additional control, it might be desirable to use the internal structures of EnergyProblem directly. This can be error prone, but it is slightly more efficient. The full description for these structures can be found in Structures.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Tiny\" # hide\n# input_dir should be the path to Tiny\ngraph, representative_periods = create_graph_and_representative_periods_from_csv_folder(input_dir)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create the model we also need a time partition for the constraints. Creating an energy problem automatically computes this data, but since we are doing it manually, we need to compute it ourselves.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"constraints_partitions = compute_constraints_partitions(graph, representative_periods)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The constraints_partitions has two dictionaries with the keys :lowest_resolution and :highest_resolution. The lowest resolution dictionary is mainly used to create the constraints for energy balance, whereas the highest resolution dictionary is mainly used to create the capacity constraints in the model.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now we can compute the model.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"model = create_model(graph, representative_periods, constraints_partitions)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, we can compute the solution.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"solution = solve_model(model)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This solution structure is exactly the same as the one returned when using an EnergyProblem.","category":"page"},{"location":"tutorial/#graph-tutorial","page":"Tutorial","title":"Using the graph structure","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Read about the graph structure in the Graph section first.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We will use the graph created above for the \"Tiny\" dataset.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The first thing that we can do is access all assets. They are the labels of the graph and can be access via the MetaGraphsNext API:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using MetaGraphsNext\n# Accessing assets\nlabels(graph)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice that the result is a generator, so if we want the actual results, we have to collect it:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"labels(graph) |> collect","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To access the asset data, we can index the graph with an asset label:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"graph[\"ocgt\"]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This is a Julia struct, or composite type, named GraphAssetData. We can access its fields with .:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"graph[\"ocgt\"].type","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Since labels returns a generator, we can iterate over its contents without collecting it into a vector.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"for a in labels(graph)\n    println(\"Asset $a has type $(graph[a].type)\")\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To get all flows we can use edge_labels:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"edge_labels(graph) |> collect","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To access the flow data, we index with graph[u, v]:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"graph[\"ocgt\", \"demand\"]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The type of the flow struct is GraphFlowData.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can easily find all assets v for which a flow (a, v) exists:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"inneighbor_labels(graph, \"demand\") |> collect","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, all assets u for which a flow (u, a) exists:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"outneighbor_labels(graph, \"ocgt\") |> collect","category":"page"},{"location":"tutorial/#solution-tutorial","page":"Tutorial","title":"Manipulating the solution","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First, see the description of the solution object.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's consider the larger dataset \"Norse\" in this section. And let's talk about two ways to access the solution.","category":"page"},{"location":"tutorial/#The-solution-returned-by-solve_model","page":"Tutorial","title":"The solution returned by solve_model","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The solution, as shown before, can be obtained when calling solve_model or solve_model!.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TulipaEnergyModel\n\ninput_dir = \"../../test/inputs/Norse\" # hide\n# input_dir should be the path to Norse\nenergy_problem = create_energy_problem_from_csv_folder(input_dir)\ncreate_model!(energy_problem)\nsolution = solve_model!(energy_problem)\nnothing # hide","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a traditional array in the order given by the investable assets, one can run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using MetaGraphsNext\n\ngraph = energy_problem.graph\n[solution.assets_investment[a] for a in labels(graph) if graph[a].investable]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a traditional array in the order given by the investable flows, one can run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"[solution.flows_investment[(u, v)] for (u, v) in edge_labels(graph) if graph[u, v].investable]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a vector with all values of flow for a given (u, v) and rp, one can run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(u, v) = first(edge_labels(graph))\nrp = 1\n[solution.flow[(u, v), rp, B] for B in graph[u, v].partitions[rp]]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a vector with the all values of storage_level for a given a and rp, one can run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"a = first(labels(graph))\nrp = 1\ncons_parts = energy_problem.constraints_partitions[:lowest_resolution]\n[solution.storage_level[a, rp, B] for B in cons_parts[(a, rp)]]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note Make sure to specify constraints_partitions[:lowest_resolution] since the storage level is determined in the energy balance constraint for the storage assets. This constraint is defined in the lowest resolution of all assets and flows involved.","category":"page"},{"location":"tutorial/#The-solution-inside-the-graph","page":"Tutorial","title":"The solution inside the graph","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In addition to the solution object, the solution is also stored by the individual assets and flows when solve_model! is called - i.e., when using a EnergyProblem object.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"They can be accessed like any other value from GraphAssetData or GraphFlowData, which means that we recreate the values from the previous section in a new way:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"[energy_problem.graph[a].investment for a in labels(graph) if graph[a].investable]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"[energy_problem.graph[u, v].investment for (u, v) in edge_labels(graph) if graph[u, v].investable]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(u, v) = first(edge_labels(graph))\nrp = 1\n[energy_problem.graph[u, v].flow[(rp, B)] for B in graph[u, v].partitions[rp]]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a vector with the all values of storage_level for a given a and rp, one can run","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"a = first(labels(graph))\nrp = 1\ncons_parts = energy_problem.constraints_partitions[:lowest_resolution]\n[energy_problem.graph[a].storage_level[(rp, B)] for B in cons_parts[(a, rp)]]","category":"page"},{"location":"tutorial/#Values-of-constraints-and-expressions","page":"Tutorial","title":"Values of constraints and expressions","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"By accessing the model directly, we can query the values of constraints and expresions. For instance, we can get all incoming flow in the lowest resolution for a given asset at a given time block for a given representative periods with the following:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using JuMP\n# a, rp, and cons_parts are defined above\nB = cons_parts[(a, rp)][1]\nvalue(energy_problem.model[:incoming_flow_lowest_resolution][a, rp, B])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The same can happen for constraints. For instance, the code below gets the consumer balance:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"a = \"Asgard_E_demand\"\nB = cons_parts[(a, rp)][1]\nvalue(energy_problem.model[:consumer_balance][a, rp, B])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The value of the constraint is obtained by looking only at the part with variables. So a constraint like 2x + 3y - 1 <= 4 would return the value of 2x + 3y.","category":"page"},{"location":"tutorial/#Writing-the-output-to-CSV","page":"Tutorial","title":"Writing the output to CSV","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The simplest way to save the output to CSV is to use packages CSV and DataFrames. Here is an example that saves the investment on the investable flows.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CSV, DataFrames\ndf = DataFrame(; asset_from = String[], asset_to = String[], investment = Float64[])\nfor (u, v) in edge_labels(graph)\n    if graph[u, v].investable\n        push!(df, (u, v, solution.flows_investment[(u, v)]))\n    end\nend\nCSV.write(\"flows_investment.csv\", df)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Reading it back to show the  result:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"CSV.read(\"flows_investment.csv\", DataFrame)","category":"page"},{"location":"tutorial/#Plotting","page":"Tutorial","title":"Plotting","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The simplest thing to do is to create vectors. For instance, in the example below, we plot the flow solution for a given flow.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Plots\n\nrp = 2\n(u, v) = (\"Asgard_Solar\", \"Asgard_E_demand\")\n\ndomain = graph[u, v].partitions[rp]\nflow_value = [solution.flow[(u, v), rp, B] for B in domain]\n\nplot(1:length(domain), flow_value, leg=false)\nxticks!(1:length(domain), string.(domain))","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice that the time domain for this flow is regular, so you might want to do some kind of processing. For instance, we can split the flow into every","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"domain = energy_problem.representative_periods[rp].time_steps\nflow_value = zeros(length(domain))\nfor B in graph[u, v].partitions[rp]\n    flow_value[B] .= solution.flow[(u, v), rp, B] / length(B)\nend\nticks = first.(graph[u, v].partitions[rp]) # Starting point of each time block\n\nplot(domain, flow_value, leg=false)\nxticks!(ticks)","category":"page"}]
}
