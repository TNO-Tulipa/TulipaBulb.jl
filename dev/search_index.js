var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TODO","category":"page"},{"location":"how-to-use/#how-to-use","page":"How to Use","title":"How to Use","text":"","category":"section"},{"location":"how-to-use/#install","page":"How to Use","title":"Install","text":"","category":"section"},{"location":"how-to-use/","page":"How to Use","title":"How to Use","text":"Clone the repository from TulipaEnergyModel.jl into your local machine\nOpen the project in your favorite IDE (e.g., Visual Studio Code)\nStart a Julia REPL and then:\n]: Enter package mode\nactivate . : Activate here (root of project)\ninstantiate : Instantiate any packages you need according to the Project.toml\ntest: (Optional) Try running the tests to see if you're set up correctly - they should pass","category":"page"},{"location":"mathematical-formulation/#math-formulation","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"This section shows the mathematical formulation of the model.\nThe full mathematical formulation is also freely available in the preprint.","category":"page"},{"location":"mathematical-formulation/#math-sets","page":"Mathematical Formulation","title":"Sets","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Elements\nmathcalA Energy assets a in mathcalA\nmathcalA_c Consumer energy assets mathcalA_c subseteq mathcalA\nmathcalA_p Producer energy assets mathcalA_p subseteq mathcalA\nmathcalA_i Energy assets with investment method mathcalA_i subseteq mathcalA\nmathcalA_b Energy assets with balance method mathcalA_b subseteq mathcalA\nmathcalRP Representative periods rp in mathcalRP\nmathcalK Time steps within the rp k in mathcalK\nmathcalF Flow connections between two assets f in mathcalF\nmathcalF_rec(a) Set of flows with receiving asset a mathcalF_rec(a) subseteq mathcalF\nmathcalF_snd(a) Set of flows with sending asset a mathcalF_snd(a) subseteq mathcalF","category":"page"},{"location":"mathematical-formulation/#math-parameters","page":"Mathematical Formulation","title":"Parameters","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Units\np^investment_cost_a Investment cost  of asset units [kEUR/MW/year]\np^variable_cost_a Variable cost of asset units [kEUR/MWh]\np^unit_capacity_a Capacity of asset units [MW]\np^rp_weight_rp Representative period weight [h]\np^profile_arp k Asset production/consumption profile [p.u.]\np^peak_demand_a Peak demand [MW]\np^init_capacity_a initial capacity of asset units [MW]","category":"page"},{"location":"mathematical-formulation/#math-variables","page":"Mathematical Formulation","title":"Variables","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Name Description Units\nv^flow_frpk in mathbbR Flow between two assets [MW]\nv^investment_a in mathbbZ^+ Number of installed asset units [units]","category":"page"},{"location":"mathematical-formulation/#math-objective-function","page":"Mathematical Formulation","title":"Objective Function","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Objective function:","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"textminimize quad investment_cost + variable_cost","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"Where:","category":"page"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\ninvestment_cost = sum_a in mathcalAi p^investment_cost_a cdot p^unit_capacity_a cdot v^investment_a \nvariable_cost = sum_a in mathcalAp sum_f in mathcalF_snd(a) sum_rp in mathcalRP sum_k in mathcalK p^rp_weight_rp cdot p^variable_cost_a cdot v^flow_frpk\nendaligned","category":"page"},{"location":"mathematical-formulation/#math-constraints","page":"Mathematical Formulation","title":"Constraints","text":"","category":"section"},{"location":"mathematical-formulation/#Balance-Constraint","page":"Mathematical Formulation","title":"Balance Constraint","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nsum_f in mathcalF_rec(a) v^flow_frpk - sum_f in mathcalF_snd(a) v^flow_frpk = p^profile_arpk cdot p^peak_demand_a quad forall a in mathcalA_b forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Upper-Bound-Constraint-for-Flows","page":"Mathematical Formulation","title":"Upper Bound Constraint for Flows","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"beginaligned\nv^flow_frpk leq p^profile_arpk cdot left(p^init_capacity_a + p^unit_capacity_a cdot v^investment_a right)  quad forall a in mathcalAp forall f in mathcalF_snd(a) forall rp in mathcalRPforall k in mathcalK\nendaligned","category":"page"},{"location":"mathematical-formulation/#Lower-Bound-Constraint-for-Flows","page":"Mathematical Formulation","title":"Lower Bound Constraint for Flows","text":"","category":"section"},{"location":"mathematical-formulation/","page":"Mathematical Formulation","title":"Mathematical Formulation","text":"v^flow_frpk geq 0 quad forall f in mathcalF forall rp in mathcalRP forall k in mathcalk","category":"page"},{"location":"reference/#[Reference]","page":"Reference","title":"[Reference]","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​ TODO","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​## Index ​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [TulipaEnergyModel]","category":"page"},{"location":"reference/#TulipaEnergyModel.compute_rp_periods-Tuple{AbstractVector{<:AbstractVector{<:UnitRange{<:Integer}}}}","page":"Reference","title":"TulipaEnergyModel.compute_rp_periods","text":"rp_periods = compute_rp_periods(array_time_steps)\n\nGiven the time steps of various flows/assets in the array_time_steps input, compute the representative period splits. Each element of array_time_steps is an array of ranges with the following assumptions:\n\nAn element is of the form V = [r₁, r₂, …, rₘ], where each rᵢ is a range a:b.\nr₁ starts at 1.\nrᵢ₊₁ starts at the end of rᵢ plus 1.\nrₘ ends at some value N, that is the same for all elements of array_time_steps.\n\nNotice that this implies that they form a disjunct partition of 1:N.\n\nThe output will also be an array of ranges with the conditions above. The output is constructed greedily, i.e., it selects the next largest breakpoint following the algorithm below:\n\nInput: Vᴵ₁, …, Vᴵₚ, a list of time step ranges. Each element of Vᴵⱼ is a range r = r.start:r.end. Output: V.\nCompute the end of the representative period N (all Vᴵⱼ should have the same end)\nStart with an empty V = []\nDefine the beginning of the range s = 1\nDefine an array with all the next breakpoints B such that Bⱼ is the first r.end such that r.end ≥ s for each r ∈ Vᴵⱼ.\nThe end of the range will be the e = max Bⱼ.\nDefine r = s:e and add r to the end of V.\nIf e = N, then END\nOtherwise, define s = e + 1 and go to step 4.\n\nExamples\n\ntime_steps1 = [1:4, 5:8, 9:12]\ntime_steps2 = [1:3, 4:6, 7:9, 10:12]\ncompute_rp_periods([time_steps1, time_steps2])\n\n# output\n\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:12\n\ntime_steps1 = [1:1, 2:3, 4:6, 7:10, 11:12]\ntime_steps2 = [1:2, 3:4, 5:5, 6:7, 8:9, 10:12]\ncompute_rp_periods([time_steps1, time_steps2])\n\n# output\n\n5-element Vector{UnitRange{Int64}}:\n 1:2\n 3:4\n 5:6\n 7:10\n 11:12\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_graph-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.create_graph","text":"graph = create_graph(assets_path, flows_path)\n\nRead the assets and flows data CSVs and create a graph object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.create_parameters_and_sets_from_file-Tuple{AbstractString}","page":"Reference","title":"TulipaEnergyModel.create_parameters_and_sets_from_file","text":"parameters, sets = create_parameters_and_sets_from_file(input_folder)\n\nReturns two NamedTuples with all parameters and sets read and created from the input files in the input_folder.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.read_csv_with_schema-Tuple{Any, Any}","page":"Reference","title":"TulipaEnergyModel.read_csv_with_schema","text":"read_csv_with_schema(file_path, schema)\n\nReads the csv with file_name at location path validating the data using the schema. It is assumes that the file's header is at the second row. The first row of the file contains some metadata information that is not used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.resolution_matrix-Tuple{AbstractVector{<:UnitRange{<:Integer}}, AbstractVector{<:UnitRange{<:Integer}}}","page":"Reference","title":"TulipaEnergyModel.resolution_matrix","text":"M = resolution_matrix(rp_periods, time_steps)\n\nComputes the resolution balance matrix using the array of rp_periods and the array of time_steps. The elements in these arrays must be ranges.\n\nExamples\n\nThe following two examples are for two flows/assets with resolutions of 3h and 4h, so that the representative period has 4h periods.\n\nrp_periods = [1:4, 5:8, 9:12]\ntime_steps = [1:4, 5:8, 9:12]\nresolution_matrix(rp_periods, time_steps)\n\n# output\n\n3×3 Matrix{Float64}:\n 1.0  0.0  0.0\n 0.0  1.0  0.0\n 0.0  0.0  1.0\n\nrp_periods = [1:4, 5:8, 9:12]\ntime_steps = [1:3, 4:6, 7:9, 10:12]\nresolution_matrix(rp_periods, time_steps)\n\n# output\n\n3×4 Matrix{Float64}:\n 1.0  0.333333  0.0       0.0\n 0.0  0.666667  0.666667  0.0\n 0.0  0.0       0.333333  1.0\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.save_solution_to_file-NTuple{4, Any}","page":"Reference","title":"TulipaEnergyModel.save_solution_to_file","text":"save_solution_to_file(output_file, v_investment, unit_capacity)\n\nSaves the solution variable vinvestment to a file \"investments.csv\" inside `outputfile. The format of each row isa,v,p*v, whereais the asset indexingvinvestment,vis correspondingvinvestmentvalue, andpis the correspondingunit_capacity` value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TulipaEnergyModel.solve_model-Tuple{Any}","page":"Reference","title":"TulipaEnergyModel.solve_model","text":"solve_model(model)\n\nSolve the model.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TulipaEnergyModel","category":"page"},{"location":"#home","page":"Home","title":"TulipaEnergyModel.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TulipaEnergyModel.jl is an optimization model for the electricity market and its coupling with other energy sectors (e.g., hydrogen, heat, natural gas, etc.). The optimization model determines the optimal investment and operation decisions for different types of assets (e.g., producers, consumers, conversion, storage, and transport). TulipaEnergyModel.jl is developed in Julia and depends on the JuMP.jl package.","category":"page"},{"location":"#license","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This content is released under the Apache License 2.0 License.","category":"page"},{"location":"#bugs-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, please start an issue or a discussion on the topic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to ask a question unsuitable for a bug report, start a discussion here. This forum is for general discussion about the repository TulipaEnergyModel.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"tutorial/#tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"TODO","category":"page"},{"location":"tutorial/#basic-example","page":"Tutorial","title":"Basic example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"TODO","category":"page"}]
}
